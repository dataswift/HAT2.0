{"version":3,"sources":["components/banners/NotificationBanner/NotificationBanner.tsx","assets/images/hat-data-rights.png","components/user/Login/Login.tsx"],"names":["NotificationBanner","type","children","fixed","display","className","module","exports","Login","useState","password","setPassword","remember","setRemember","hatName","setHatName","hatDomain","setHatDomain","errorMsg","setErrorMsg","hidePassword","setHidePassword","history","useHistory","location","useLocation","dispatch","useDispatch","targetParam","queryString","window","search","target","from","state","loginSuccessful","replace","href","origin","useEffect","host","hostname","hatSvc","HatClientService","getInstance","substring","indexOf","token","Cookies","get","isTokenExpired","loginWithToken","login","a","userAccessToken","res","parsedBody","accessToken","secure","protocol","set","expires","sameSite","hideMobile","src","alt","onSubmit","e","preventDefault","name","autoComplete","onFocus","value","onChange","placeholder","tabIndex","onClick","htmlFor","id","checked","dataRightsLogo","height","width","push"],"mappings":"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","file":"static/js/user_login.ea038eee.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\nimport './NotificationBanner.scss';\n\ntype Props = {\n  type: string;\n  display: boolean;\n  children: ReactNode;\n  fixed?: boolean;\n}\n\nexport const NotificationBanner: React.FC<Props> = ({ type, children, fixed, display }) => {\n  return (\n    <div>\n      {display && (\n        <>\n          <div className={\n            `notification-banner-container \n            notification-banner-container-${ type } \n            ${ fixed ? 'notification-fixed' : null }`\n          }>\n            {type === 'error' && (\n              <i className=\"material-icons notification-banner-container-icon\">warning</i>\n            )}\n            {children}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n","module.exports = __webpack_public_path__ + \"static/media/hat-data-rights.2c50a9f4.png\";","import React, { useEffect, useState } from 'react';\nimport './Login.scss';\nimport dataRightsLogo from '../../../assets/images/hat-data-rights.png';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { userAccessToken } from '../../../api/hatAPI';\nimport { loginWithToken } from '../../../features/authentication/authenticationSlice';\nimport { useDispatch } from 'react-redux';\nimport { HatClientService } from '../../../services/HatClientService';\nimport Cookies from 'js-cookie';\nimport { InfoHeader } from \"../../headers/InfoHeader/InfoHeader\";\nimport { NotificationBanner } from \"../../banners/NotificationBanner/NotificationBanner\";\nimport * as queryString from \"query-string\";\n\ntype Query = {\n  target?: string;\n}\n\nconst Login: React.FC = () => {\n  const [password, setPassword] = useState('');\n  const [remember, setRemember] = useState(true);\n  const [hatName, setHatName] = useState('');\n  const [hatDomain, setHatDomain] = useState('');\n  const [errorMsg, setErrorMsg] = useState('');\n  const [hidePassword, setHidePassword] = useState(true);\n  let history = useHistory();\n  let location = useLocation();\n  const dispatch = useDispatch();\n  const { target } = queryString.parse(window.location.search) as Query;\n  const targetParam = target;\n  // @ts-ignore\n  const from = location.state?.from || '/feed';\n\n  const loginSuccessful = () => {\n    if (from) {\n      history.replace(from);\n    } else {\n      window.location.href = window.location.origin + '/#' + targetParam;\n    }\n  };\n\n  useEffect(() => {\n    const host = window.location.hostname;\n    const hatSvc = HatClientService.getInstance();\n\n    setHatName(host.substring(0, host.indexOf('.')));\n    setHatDomain(host.substring(host.indexOf('.')));\n\n    const token = Cookies.get('token');\n\n    if (token && !hatSvc.isTokenExpired(token)) {\n      dispatch(loginWithToken(token));\n      HatClientService.getInstance(token);\n\n      loginSuccessful();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const login = async () => {\n    setErrorMsg('');\n\n    try {\n      const res = await userAccessToken(hatName, password);\n\n      if (res.parsedBody) {\n        dispatch(loginWithToken(res.parsedBody.accessToken));\n        HatClientService.getInstance(res.parsedBody.accessToken);\n\n        if (remember) {\n          const secure = window.location.protocol === 'https:';\n          Cookies.set('token', res.parsedBody.accessToken, { expires: 3, secure: secure, sameSite: 'strict' });\n        }\n\n        loginSuccessful();\n      }\n    } catch (e) {\n      setErrorMsg('Sorry, that password is incorrect!');\n    }\n  };\n\n  const navigateToPasswordRecovery = () => {\n    history.push('/user/password/recover');\n  };\n\n  return (\n    <div className={'login flex-column-wrapper'}>\n      <InfoHeader hideMobile fixed />\n      <NotificationBanner type={'error'} display={!!errorMsg}>{errorMsg}</NotificationBanner>\n      <span className={'flex-spacer-small'} />\n      <img\n        className={'login-dataswift-logo'}\n        src={'https://cdn.dataswift.io/dataswift/logo/ds-full-dark.svg'}\n        alt={'Dataswift logo'}\n      />\n      <hr />\n      <div className=\"title-hat-domain-wrapper\">\n        <div className=\"hat-name\">\n          <h3>{hatName}</h3>\n        </div>\n        <div className=\"hat-domain\">\n          <h3>{hatDomain}</h3>\n        </div>\n      </div>\n\n      <form onSubmit={e => {\n        e.preventDefault();\n        login();\n      }}\n      className={'flex-column-wrapper'}\n      >\n        <div className=\"input-password-container login-password-container\">\n          <input\n            type={hidePassword ? 'password' : 'text'}\n            name=\"password\"\n            autoComplete={'password'}\n            onFocus={() => setErrorMsg('')}\n            value={password}\n            onChange={e => setPassword(e.target.value)}\n            placeholder=\"Password\"\n          />\n          <button type=\"button\" tabIndex={-1} onClick={() => setHidePassword(!hidePassword)}>\n            <i className={'material-icons'}>{hidePassword ? ' visibility_off' : ' visibility'}</i>\n          </button>\n        </div>\n\n        <div className={'checkbox-container login-remember-me-container'}>\n          <label htmlFor={'rememberMe'}>\n          Remember me\n            <input\n              id={'rememberMe'}\n              name={'rememberMe'}\n              type={'checkbox'}\n              checked={remember}\n              onChange={e => setRemember(e.target.checked)}\n            />\n            <span className=\"checkbox-checkmark\" />\n          </label>\n        </div>\n\n        <span className={'flex-spacer-small'} />\n\n        <div className=\"logo-wrapper\">\n          <img src={dataRightsLogo} height=\"48\" width=\"48\" alt=\"HAT Data rights logo\" />\n        </div>\n\n        <div className=\"data-rights-description\">\n        Data rights protection ensures your HAT is always secure and that the rights to your data are preserved. Your\n        password will not be shared with the application.\n        </div>\n\n        <div className=\"user-actions\">\n          <button type=\"submit\" className=\"btn btn-accent\" onClick={() => login()}>\n          Log in\n          </button>\n          <button\n            className={'btn btn-transparent-grey'}\n            type={'button'}\n            onClick={() => navigateToPasswordRecovery()}\n          >\n          Forgotten password?\n          </button>\n        </div>\n      </form>\n\n      <span className={'flex-spacer-large'} />\n    </div>\n  );\n};\n\nexport default Login;\n"],"sourceRoot":""}