{"version":3,"sources":["features/authentication/AuthRecoverPassword.tsx"],"names":["AuthRecoverPassword","parentApp","useSelector","selectApplicationHmi","parentAppState","selectApplicationHmiState","messages","selectMessages","useState","email","setEmail","errorMessage","setErrorMessage","errorSuggestion","setErrorSuggestion","successfulResponse","setSuccessfulResponse","resetPassword","a","recoverPassword","Date","validateAndReset","isEmail","className","src","info","graphics","logo","normal","alt","name","state","id","asHtml","onClick","type","placeholder","autoComplete","value","hasError","onChange","e","target","disabled","length"],"mappings":"2OAiGeA,UAvFuB,WACpC,IAAMC,EAAYC,YAAYC,KACxBC,EAAiBF,YAAYG,KAC7BC,EAAWJ,YAAYK,KAC7B,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAA8CJ,mBAAS,IAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KACA,EAAoDN,mBAAsB,MAA1E,mBAAOO,EAAP,KAA2BC,EAA3B,KAEMC,EAAa,uCAAG,sBAAAC,EAAA,+EAEAC,YAAgB,CAAEV,MAAOA,IAFzB,eAKhBO,EAAsB,IAAII,MALV,gDAQdd,IACFM,EAAgBN,EAAS,uBACzBQ,EAAmBR,EAAS,4BAVZ,yDAAH,qDAebe,EAAgB,uCAAG,sBAAAH,EAAA,sDACnBI,YAAQb,GACVQ,IAEIX,IACFM,EAAgBN,EAAS,mCACzBQ,EAAmBR,EAAS,8CANT,2CAAH,qDAWtB,OACE,8BACE,sBAAKiB,UAAW,iCAAhB,UACE,cAAC,IAAD,CACEC,IAAG,OAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAWwB,KAAKC,SAASC,KAAKC,OACnCC,IAAG,OAAE5B,QAAF,IAAEA,OAAF,EAAEA,EAAWwB,KAAKK,KACrBC,MAAO3B,IAGRW,GACC,qCACE,oBAAIQ,UAAW,sCAAf,SAAuDd,IACvD,oBAAIc,UAAW,mBAAf,SACE,cAAC,IAAD,CAAeS,GAAI,wCAAyCC,QAAM,MAGpE,qBAAKV,UAAW,kBAAmBW,QAAS,kBAAMb,KAAlD,SACE,cAAC,IAAD,CAAeW,GAAI,4CAA6CC,QAAM,UAK1ElB,GACA,qCACE,oBAAIQ,UAAW,mBAAf,SACE,cAAC,IAAD,CAAeS,GAAI,gCAAiCC,QAAM,MAE5D,cAAC,IAAD,CACEE,KAAM,QACNC,YAAa,QACbC,aAAc,QACdL,GAAI,QACJM,MAAO7B,EACP8B,WAAY5B,EACZA,aAAcA,EACdE,gBAAiBA,EACjB2B,SAAU,SAACC,GAAD,OAAO/B,EAAS+B,EAAEC,OAAOJ,UAGrC,wBAAQf,UAAW,0DACjBoB,SAAUlC,EAAMmC,OAAS,EACzBV,QAAS,kBAAMb,KAFjB,SAIE,cAAC,IAAD,CAAeW,GAAI","file":"static/js/auth_recover_password.661a4c6f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './AuthLogin.scss';\nimport { recoverPassword } from '../../api/hatAPI';\nimport { AuthApplicationLogo, Input } from 'hmi';\nimport { isEmail } from '../../utils/validations';\nimport { selectApplicationHmi, selectApplicationHmiState } from '../applications/applicationsSlice';\nimport { useSelector } from 'react-redux';\nimport FormatMessage from '../messages/FormatMessage';\nimport { selectMessages } from '../messages/messagesSlice';\n\nconst AuthRecoverPassword: React.FC = () => {\n  const parentApp = useSelector(selectApplicationHmi);\n  const parentAppState = useSelector(selectApplicationHmiState);\n  const messages = useSelector(selectMessages);\n  const [email, setEmail] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [errorSuggestion, setErrorSuggestion] = useState('');\n  const [successfulResponse, setSuccessfulResponse] = useState<Date | null>(null);\n\n  const resetPassword = async () => {\n    try {\n      const res = await recoverPassword({ email: email });\n\n      if (res) {\n        setSuccessfulResponse(new Date());\n      }\n    } catch (error) {\n      if (messages) {\n        setErrorMessage(messages['ds.auth.error.oops']);\n        setErrorSuggestion(messages['ds.auth.error.tryAgain']);\n      }\n    }\n  };\n\n  const validateAndReset = async () => {\n    if (isEmail(email)) {\n      resetPassword();\n    } else {\n      if (messages) {\n        setErrorMessage(messages['ds.auth.error.notValidUsername']);\n        setErrorSuggestion(messages['ds.auth.error.notValidUsernameSuggestion']);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div className={'flex-column-wrapper auth-login'}>\n        <AuthApplicationLogo\n          src={parentApp?.info.graphics.logo.normal}\n          alt={parentApp?.info.name}\n          state={parentAppState}\n        />\n\n        {successfulResponse && (\n          <>\n            <h2 className={'ds-hmi-email auth-login-email-title'}>{email}</h2>\n            <h2 className={'auth-login-title'}>\n              <FormatMessage id={'ds.auth.recoverPassword.success.title'} asHtml />\n            </h2>\n\n            <div className={'auth-login-text'} onClick={() => validateAndReset()}>\n              <FormatMessage id={'ds.auth.recoverPassword.success.sendAgain'} asHtml />\n            </div>\n          </>\n        )}\n\n        {!successfulResponse && (\n          <>\n            <h2 className={'auth-login-title'}>\n              <FormatMessage id={'ds.auth.recoverPassword.title'} asHtml />\n            </h2>\n            <Input\n              type={'email'}\n              placeholder={'Email'}\n              autoComplete={'email'}\n              id={'email'}\n              value={email}\n              hasError={!!errorMessage}\n              errorMessage={errorMessage}\n              errorSuggestion={errorSuggestion}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            \n            <button className={'auth-recover-password-btn ds-hmi-btn ds-hmi-btn-primary'}\n              disabled={email.length < 3}\n              onClick={() => validateAndReset()}\n            >\n              <FormatMessage id={'ds.auth.recoverPassword.resetBtn'} />\n            </button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AuthRecoverPassword;\n"],"sourceRoot":""}