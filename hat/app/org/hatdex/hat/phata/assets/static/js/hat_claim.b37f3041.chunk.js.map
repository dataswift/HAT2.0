{"version":3,"sources":["components/banners/NotificationBanner/NotificationBanner.tsx","assets/images/hat-data-rights.png","components/PasswordStrengthMeter/PasswordStrengthMeter.tsx","features/hat-claim/HatClaimActions/HatClaimActions.tsx","features/hat-claim/messages-hat-claim.ts","features/hat-claim/redux/actions/hatClaimActions.ts","features/hat-claim/HatClaimEmail/HatClaimEmail.tsx","features/hat-claim/HatClaimUrl/HatClaimUrl.tsx","features/hat-claim/HatClaimPassword/HatClaimPassword.tsx","features/hat-claim/HatClaimConfirmation/HatClaimConfirmation.tsx","features/hat-claim/HatClaimSuccess/HatClaimSuccess.tsx","features/hat-claim/HatClaim/HatClaim.tsx"],"names":["NotificationBanner","type","children","fixed","display","className","PasswordStrengthMeter","createPasswordLabel","result","getPasswordStrengthProgress","progress","passwordStrength","this","props","score","value","max","Component","HatClaimActions","onClick","setCurrentStep","currentStep","style","textAlign","marginTop","href","rel","target","hatClaimMessages","editHatClaim","name","ReduxActionTypes","EDIT_HAT_CLAIM","step","EDIT_CURRENT_STEP","editHatClaimPassword","EDIT_HAT_PASSWORD","editHatClaimErrorMessage","message","EDIT_HAT_CLAIM_ERROR_MSG","connect","state","hatClaim","dispatch","bindActionCreators","placeholder","disabled","email","htmlFor","id","checked","optins","onChange","event","hatName","hatCluster","debounce","require","password","useState","hide1","setHide1","hide2","setHide2","validatePasswordDebounce","p","zxcvbn","validatePassword","passwordMatchDebounce","passwordIsValid","passwordConfirm","newPassword","length","useEffect","autoComplete","hidden","e","tabIndex","HatClaimUrlConfirmation","src","alt","hatDRLogo","errorMsg","claimToken","useParams","history","useHistory","nextStep","a","claimHat","buildClaimRequest","parsedBody","changeStep","queryString","window","location","search","host","hostname","substring","indexOf","loadDynamicZxcvbn","newStep","isEmail","handleSubmission","replace"],"mappings":"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","file":"static/js/hat_claim.b37f3041.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\nimport './NotificationBanner.scss';\n\ntype Props = {\n  type: string;\n  display: boolean;\n  children: ReactNode;\n  fixed?: boolean;\n}\n\nexport const NotificationBanner: React.FC<Props> = ({ type, children, fixed, display }) => {\n  return (\n    <div>\n      {display && (\n        <>\n          <div className={\n            `notification-banner-container \n            notification-banner-container-${ type } \n            ${ fixed ? 'notification-fixed' : null }`\n          }>\n            {type === 'error' && (\n              <i className=\"material-icons notification-banner-container-icon\">warning</i>\n            )}\n            {children}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/hat-data-rights.27c31876.png\";","import React, { Component, ReactNode } from 'react';\nimport './PasswordStrengthMeter.scss';\n\nexport class PasswordStrengthMeter extends Component<IPasswordStrengthProps> {\n  createPasswordLabel = (result: number) => {\n    switch (result) {\n      case 0:\n        return 'Too weak';\n      case 1:\n        return 'Too weak';\n      case 2:\n        return 'So-so';\n      case 3:\n        return 'Strong';\n      case 4:\n        return 'Very Strong';\n      default:\n        return '';\n    }\n  };\n\n  getPasswordStrengthProgress = (progress: number) => {\n    if (progress <= 1) {\n      return 1;\n    } else if (progress === 2) {\n      return 2;\n    } else {\n      return 4;\n    }\n  };\n\n  render(): ReactNode {\n    const passwordStrength = this.props.passwordStrength;\n    return (\n      <div className=\"password-strength-meter\">\n        {passwordStrength && (\n          <>\n            <progress\n              className={`password-strength-meter-progress strength-${ passwordStrength.score }`}\n              value={this.getPasswordStrengthProgress(passwordStrength.score)}\n              max=\"4\"\n            />\n            <br />\n\n            <div className={`password-strength-meter-label text-strength-${ passwordStrength.score }`}>\n              {this.createPasswordLabel(passwordStrength.score)}\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\ninterface IPasswordStrengthProps {\n  passwordStrength: IPasswordStrength;\n}\n\nexport interface IPasswordStrength {\n  score: number;\n}\n","import React from 'react';\nimport './HatClaimActions.scss';\n\ninterface Props {\n  currentStep: number;\n  setCurrentStep: (newStep: number) => void;\n}\n\nconst HatClaimActions: React.FC<Props> = props => {\n  return (\n    <div className=\"hat-claim-actions flex-column-wrapper flex-align-items-center\">\n      <button className={'btn btn-accent'} onClick={() => props.setCurrentStep(props.currentStep + 1)}>\n        {props.currentStep === 3 ? 'Confirm' : props.currentStep === 5 ? 'login' : 'Next'}\n      </button>\n      {props.currentStep !== 0 && props.currentStep !== 3 && props.currentStep !== 5 && (\n        <button className={'btn btn-transparent'} onClick={() => props.setCurrentStep(props.currentStep - 1)}>\n          Previous\n        </button>\n      )}\n\n      {props.currentStep === 3 && (\n        <div className=\"text-small\" style={{ textAlign: 'center', marginTop: '1.8rem' }}>\n          By selecting 'Confirm', I agree to the Dataswift&nbsp;\n          <a\n            href=\"https://www.dataswift.io/legal/dataswift-personal-data-account-owner-agreement\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Personal Data Account (PDA) Owner Agreement\n          </a>\n          &nbsp; and{' '}\n          <a\n            href=\"https://www.dataswift.io/legal/privacy-policy\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Privacy Policy\n          </a>\n          .\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HatClaimActions;\n","export const hatClaimMessages: hatClaimMessages = {\n  claimYourHat: 'Claim your HAT',\n  informationOnlyUsed:\n  // eslint-disable-next-line max-len\n    'This information is only used to create your HAT Microserver. Your personal information will never be shared with anyone unless you authorise it.',\n  subscribeMadHatters: 'Subscribe to MadHATTERs (Tech news, HAT slanted)',\n  yourHatUrl: 'Your HAT URL',\n  hatUrlDescription:\n    \"This is your HAT Microserver URL. After clicking 'Next' you will be able to choose your password.\",\n  choosePassword: 'Choose your password',\n  dataPrecious: 'Your data is precious - keep it safe with a password that is Strong or Very Strong.',\n  yourHatMicroserver: 'Your HAT Microserver',\n  claiming100mbStorage: 'You are claiming a HAT Microserver with 100MB storage.',\n};\n\ninterface hatClaimMessages {\n  claimYourHat: string;\n  informationOnlyUsed: string;\n  subscribeMadHatters: string;\n  yourHatUrl: string;\n  hatUrlDescription: string;\n  choosePassword: string;\n  dataPrecious: string;\n  yourHatMicroserver: string;\n  claiming100mbStorage: string;\n}\n","import { ReduxActionTypes, ReduxBaseAction } from '../../../../redux/actions/rootActions';\n\nexport interface ReduxEditHatClaimAction extends ReduxBaseAction {\n  name: string;\n  value: string | boolean;\n}\n\nexport interface ReduxEditPasswordHatClaimAction extends ReduxBaseAction {\n  name: string;\n  value: string | boolean | object;\n}\n\nexport interface ReduxEditErrorMsgHatClaimAction extends ReduxBaseAction {\n  message: string;\n}\n\nexport interface ReduxEdiCurrentStepHatClaimAction extends ReduxBaseAction {\n  step: number;\n}\n\nexport function editHatClaim(name: string, value: string | boolean): ReduxEditHatClaimAction {\n  return {\n    type: ReduxActionTypes.EDIT_HAT_CLAIM,\n    name,\n    value,\n  };\n}\n\nexport function setCurrentStep(step: number): ReduxEdiCurrentStepHatClaimAction {\n  return {\n    type: ReduxActionTypes.EDIT_CURRENT_STEP,\n    step,\n  };\n}\n\nexport function editHatClaimPassword(name: string, value: string | boolean | object): ReduxEditPasswordHatClaimAction {\n  return {\n    type: ReduxActionTypes.EDIT_HAT_PASSWORD,\n    name,\n    value,\n  };\n}\n\nexport function editHatClaimErrorMessage(message: string): ReduxEditErrorMsgHatClaimAction {\n  return {\n    type: ReduxActionTypes.EDIT_HAT_CLAIM_ERROR_MSG,\n    message,\n  };\n}\n","import React from 'react';\nimport './HatClaimEmail.scss';\nimport { hatClaimMessages } from '../messages-hat-claim';\nimport { AppState } from '../../../redux/reducer/rootReducer';\nimport { AnyAction, bindActionCreators, Dispatch } from 'redux';\nimport { editHatClaim } from '../redux/actions/hatClaimActions';\nimport { connect } from 'react-redux';\n\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst HatClaimEmail: React.FC<Props> = props => {\n  if (props.currentStep !== 0) {\n    return null;\n  }\n  return (\n    <div className=\"hat-claim-email flex-column-wrapper flex-content-center flex-align-items-center\">\n      <h2>{hatClaimMessages.claimYourHat}</h2>\n      <div className={'text-medium'}>{hatClaimMessages.informationOnlyUsed}</div>\n      <input\n        placeholder={'email'}\n        type={'email'}\n        disabled={true}\n        value={props.hatClaim.email || 'Unspecified email address'}\n      />\n      <div className={'checkbox-container'}>\n        <label className={'text-medium'} htmlFor={'newsletterOptin'}>\n          {hatClaimMessages.subscribeMadHatters}\n          <input\n            id={'newsletterOptin'}\n            name={'newsletterOptin'}\n            type={'checkbox'}\n            checked={props.hatClaim.optins}\n            onChange={event => props.editHatClaim('optins', event.target.checked)}\n          />\n          <span className=\"checkbox-checkmark\" />\n        </label>\n      </div>\n      <div className={'text-small text-align-left'}>\n        You can change your mind at any time by clicking the unsubscribe link in the footer of any email you receive\n        from us. Learn how we treat your information with respect in our&nbsp;\n        <a\n          href={'https://cdn.dataswift.io/legal/dataswift-privacy-policy.pdf'}\n          target={'_blank'}\n          rel=\"noopener noreferrer\"\n        >\n          privacy policy.\n        </a>\n        &nbsp; By clicking ‘Next’ you agree to have read the privacy policy.\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  hatClaim: state.hatClaim.hatClaim,\n  currentStep: state.hatClaim.currentStep,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>\n  bindActionCreators(\n    {\n      editHatClaim,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HatClaimEmail);\n","import React from 'react';\nimport './HatClaimUrl.scss';\nimport { hatClaimMessages } from '../messages-hat-claim';\nimport { AppState } from '../../../redux/reducer/rootReducer';\nimport { AnyAction, bindActionCreators, Dispatch } from 'redux';\nimport { editHatClaim } from '../redux/actions/hatClaimActions';\nimport { connect } from 'react-redux';\n\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst HatClaimUrl: React.FC<Props> = props => {\n  if (props.currentStep !== 1) {\n    return null;\n  }\n\n  return (\n    <div className=\"hat-claim-url flex-column-wrapper flex-content-center flex-align-items-center\">\n      <h2>{hatClaimMessages.yourHatUrl}</h2>\n      <div className=\"title-hat-domain-wrapper\">\n        <div className=\"hat-name\">\n          <h3>{props.hatClaim.hatName}</h3>\n        </div>\n        <div className=\"hat-domain\">\n          <h3>.{props.hatClaim.hatCluster}</h3>\n        </div>\n      </div>\n      <div className={'text-medium'}>{hatClaimMessages.hatUrlDescription}</div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  hatClaim: state.hatClaim.hatClaim,\n  currentStep: state.hatClaim.currentStep,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>\n  bindActionCreators(\n    {\n      editHatClaim,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HatClaimUrl);\n","import React, { useEffect, useState } from 'react';\nimport './HatClaimPassword.scss';\nimport { hatClaimMessages } from '../messages-hat-claim';\nimport { AppState } from '../../../redux/reducer/rootReducer';\nimport { AnyAction, bindActionCreators, Dispatch } from 'redux';\nimport { editHatClaim, editHatClaimErrorMessage, editHatClaimPassword } from '../redux/actions/hatClaimActions';\nimport { connect } from 'react-redux';\nimport { PasswordStrengthMeter } from \"../../../components/PasswordStrengthMeter/PasswordStrengthMeter\";\nconst debounce = require('lodash.debounce');\ndeclare const zxcvbn: any;\n\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst HatClaimPassword: React.FC<Props> = props => {\n  const [hide1, setHide1] = useState(true);\n  const [hide2, setHide2] = useState(true);\n\n  const validatePasswordDebounce = debounce((p: string) => validatePassword(p), 400);\n\n  const passwordMatchDebounce = debounce(\n    () => passwordIsValid(props.password.password, props.password.passwordConfirm),\n    400\n  );\n\n  function validatePassword(password: string) {\n    const score = zxcvbn(password).score;\n    props.editHatClaimPassword('passwordStrength', { score: score });\n  }\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    props.editHatClaimPassword(name, value);\n\n    if (name === 'password') {\n      validatePasswordDebounce(value);\n      props.editHatClaim(name, value);\n    }\n  };\n\n  const passwordIsValid = (password: string, newPassword: string): boolean => {\n    if (password === newPassword) {\n      if (!(props.password.passwordStrength.score > 2)) {\n        return false;\n      }\n\n      props.editHatClaimErrorMessage('');\n\n      return true;\n    } else {\n      if (newPassword.length > 5) {\n        props.editHatClaimErrorMessage(\"Your passwords don't match!\");\n      }\n\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    passwordMatchDebounce();\n    // eslint-disable-next-line\n  }, [props.password.password, props.password.passwordConfirm]);\n\n  if (props.currentStep !== 2) {\n    return null;\n  }\n\n  return (\n    <div className=\"hat-claim-password flex-column-wrapper flex-content-center flex-align-items-center\">\n      <h2>{hatClaimMessages.choosePassword}</h2>\n      <div className=\"title-hat-domain-wrapper\">\n        <div className=\"hat-name\">\n          <h3>{props.hatClaim.hatName}</h3>\n        </div>\n        <div className=\"hat-domain\">\n          <h3>.{props.hatClaim.hatCluster}</h3>\n        </div>\n      </div>\n      <div className={'text-medium'}>{hatClaimMessages.dataPrecious}</div>\n      <form>\n        <input name={'username'} autoComplete={'username'} type={'text'} hidden={true} />\n\n        <div className=\"input-password-container\">\n          <input\n            type={hide1 ? 'password' : 'text'}\n            name=\"password\"\n            autoComplete={'new-password'}\n            value={props.hatClaim.password}\n            onChange={e => onChange(e)}\n            placeholder=\"Password\"\n          />\n          <button type=\"button\" tabIndex={-1} onClick={() => setHide1(!hide1)}>\n            <i className={'material-icons'}>{hide1 ? ' visibility_off' : ' visibility'}</i>\n          </button>\n        </div>\n        <div className=\"input-password-container\">\n          <input\n            type={hide2 ? 'password' : 'text'}\n            name=\"passwordConfirm\"\n            autoComplete={'new-password'}\n            value={props.password.passwordConfirm}\n            onChange={e => onChange(e)}\n            placeholder=\"Confirm Password\"\n          />\n          <button type=\"button\" tabIndex={-1} onClick={() => setHide2(!hide2)}>\n            <i className={'material-icons'}>{hide2 ? ' visibility_off' : ' visibility'}</i>\n          </button>\n        </div>\n      </form>\n      {props.password.password.length > 0 && (\n        <PasswordStrengthMeter passwordStrength={props.password.passwordStrength} />\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  hatClaim: state.hatClaim.hatClaim,\n  currentStep: state.hatClaim.currentStep,\n  password: state.hatClaim.password,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>\n  bindActionCreators(\n    {\n      editHatClaim,\n      editHatClaimPassword,\n      editHatClaimErrorMessage,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HatClaimPassword);\n","import React from 'react';\nimport { hatClaimMessages } from '../messages-hat-claim';\n\ninterface Props {\n  currentStep: number;\n}\n\nconst HatClaimUrlConfirmation: React.FC<Props> = props => {\n  if (props.currentStep !== 3) {\n    return null;\n  }\n\n  return (\n    <div className=\"hat-claim-url flex-column-wrapper flex-content-center flex-align-items-center\">\n      <h2>{hatClaimMessages.yourHatMicroserver}</h2>\n      <div className={'text-medium'}>{hatClaimMessages.claiming100mbStorage}</div>\n    </div>\n  );\n};\n\nexport default HatClaimUrlConfirmation;\n","import React from 'react';\nimport './HatClaimSuccess.scss';\nimport { AppState } from '../../../redux/reducer/rootReducer';\nimport { AnyAction, bindActionCreators, Dispatch } from 'redux';\nimport { editHatClaim } from '../redux/actions/hatClaimActions';\nimport { connect } from 'react-redux';\nimport hatDRLogo from '../../../assets/images/hat-data-rights.png';\n\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst HatClaimSuccess: React.FC<Props> = props => {\n  if (props.currentStep !== 5) {\n    return null;\n  }\n\n  return (\n    <div className=\"hat-claim-success flex-column-wrapper flex-content-center flex-align-items-center\">\n      <h2>Success!</h2>\n      <div className={'text-medium'}>Your HAT Microserver with the following URL has been claimed.</div>\n\n      <div className=\"title-hat-domain-wrapper\">\n        <div className=\"hat-name\">\n          <h3>{props.hatClaim.hatName}</h3>\n        </div>\n        <div className=\"hat-domain\">\n          <h3>.{props.hatClaim.hatCluster}</h3>\n        </div>\n      </div>\n\n      <div className={'your-hat-issuer'}>Your HAT issuer is</div>\n\n      <div className=\"issuer-logo\">\n        <img src=\"https://cdn.dataswift.io/dataswift/logo/ds-full-dark.svg\" alt={'Dataswift'} />\n      </div>\n\n      <div className=\"drp-image\">\n        <img src={hatDRLogo} alt={'Data rights protected'} />\n      </div>\n\n      <div className={'text-medium'}>\n        This icon appears every time you access your HAT Microserver and whenever you issue instructions to your HAT\n        Microserver. Data rights protection ensures your HAT Microserver is always secure and that the rights to your\n        data are preserved.\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  hatClaim: state.hatClaim.hatClaim,\n  currentStep: state.hatClaim.currentStep,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>\n  bindActionCreators(\n    {\n      editHatClaim,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HatClaimSuccess);\n","import React, { useEffect } from 'react';\nimport './HatClaim.scss';\nimport HatClaimActions from '../HatClaimActions';\nimport HatClaimEmail from '../HatClaimEmail';\nimport HatClaimUrl from '../HatClaimUrl/HatClaimUrl';\nimport HatClaimPassword from '../HatClaimPassword';\nimport HatClaimUrlConfirmation from '../HatClaimConfirmation/HatClaimConfirmation';\nimport { useHistory, useParams } from 'react-router';\nimport { isEmail } from '../../../utils/validations';\nimport { connect } from 'react-redux';\nimport { AnyAction, bindActionCreators, Dispatch } from 'redux';\nimport { AppState } from '../../../redux/reducer/rootReducer';\nimport {\n  editHatClaim,\n  editHatClaimErrorMessage,\n  editHatClaimPassword,\n  setCurrentStep,\n} from '../redux/actions/hatClaimActions';\nimport { loadDynamicZxcvbn } from '../../../utils/load-dynamic-zxcvbn';\nimport { buildClaimRequest, claimHat } from '../hat-claim.service';\nimport HatClaimSuccess from '../HatClaimSuccess/HatClaimSuccess';\nimport { NotificationBanner } from '../../../components/banners/NotificationBanner/NotificationBanner';\nimport * as queryString from 'query-string';\n\ntype Query = {\n  email?: string;\n};\n\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst HatClaim: React.FC<Props> = (props) => {\n  const { claimToken } = useParams<{ claimToken: string }>();\n  let history = useHistory();\n\n  useEffect(() => {\n    const { email } = queryString.parse(window.location.search) as Query;\n    const host = window.location.hostname;\n\n    const hatName = host.substring(0, host.indexOf('.'));\n    const hatCluster = host.substring(host.indexOf('.') + 1);\n\n    if (!!email) {\n      props.editHatClaim('email', email);\n      props.editHatClaim('hatName', hatName);\n      props.editHatClaim('hatCluster', hatCluster);\n\n      loadDynamicZxcvbn(() => {\n        // zxcvbn ready\n      });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  async function handleSubmission(nextStep: number) {\n    try {\n      props.editHatClaimErrorMessage('');\n      const res = await claimHat(claimToken || '', buildClaimRequest(props.hatClaim));\n\n      if (res.parsedBody) {\n        changeStep(nextStep + 1);\n      }\n    } catch (e) {\n      props.editHatClaimErrorMessage('Something went wrong, please try again');\n      changeStep(nextStep - 1);\n    }\n  }\n\n  const goToLogin = () => {\n    history.replace('/user/login');\n  };\n\n  const changeStep = (newStep: number) => {\n    if (newStep === 1) {\n      if (isEmail(props.hatClaim.email)) {\n        props.setCurrentStep(newStep);\n      }\n    } else if (newStep === 3) {\n      if (props.password.passwordStrength.score >= 2 && props.password.password === props.password.passwordConfirm) {\n        props.setCurrentStep(newStep);\n      }\n    } else if (newStep === 4) {\n      handleSubmission(newStep);\n    } else if (newStep === 5) {\n      props.setCurrentStep(newStep);\n    } else if (newStep === 6) {\n      goToLogin();\n    } else {\n      props.setCurrentStep(newStep);\n    }\n  };\n\n  return (\n    <div className=\"hat-claim flex-column-wrapper\">\n      <NotificationBanner type={'error'} display={!!props.errorMsg}>\n        {props.errorMsg}\n      </NotificationBanner>\n\n      <span className={'flex-spacer-small'} />\n      <HatClaimEmail />\n      <HatClaimUrl />\n      <HatClaimPassword />\n      <HatClaimUrlConfirmation currentStep={props.currentStep} />\n      <HatClaimSuccess />\n\n      <span className={'flex-spacer-large'} />\n      <HatClaimActions currentStep={props.currentStep} setCurrentStep={(newStep) => changeStep(newStep)} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  hatClaim: state.hatClaim.hatClaim,\n  currentStep: state.hatClaim.currentStep,\n  password: state.hatClaim.password,\n  errorMsg: state.hatClaim.errorMsg,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>\n  bindActionCreators(\n    {\n      editHatClaim,\n      setCurrentStep,\n      editHatClaimPassword,\n      editHatClaimErrorMessage,\n    },\n    dispatch,\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HatClaim);\n"],"sourceRoot":""}