{"version":3,"sources":["features/tools/ToolDetails.tsx","features/tools/ToolDetailsActions.tsx"],"names":["HatToolStatus","ToolDetailsActions","setup","toolId","dispatch","useDispatch","ActionMenu","showOptions","onClick","disconnectTool","className","FormatMessage","id","getToolStatusIcon","toolEnabled","getToolStatusText","getToolDetails","tool","developer","name","url","country","info","version","termsUrl","supportContact","provider","website","format","Date","versionReleaseDate","ToolDetails","useParams","useSelector","selectToolById","useEffect","getToolById","DetailsHeader","logoSrc","graphics","logo","normal","logoAltText","isTool","toolbarActions","status","enabled","connectTool","RUNNING","UNTOUCHED","InformationDetails","header","description","text","screenshots","map","screenshot","informationListData"],"mappings":"gIAYKA,E,6ECQUC,EAb0D,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC3EC,EAAWC,cAGjB,OACE,cAACC,EAAA,EAAD,CAAYC,YAAaL,EAAzB,SACE,yBAAQM,QAJS,kBAAMJ,EAASK,YAAeN,KAIhBO,UAAU,oBAAzC,UACE,mBAAGA,UAAU,iBAAb,sBADF,IAC6C,cAACC,EAAA,EAAD,CAAeC,GAAG,0C,SDFhEZ,K,kBAAAA,E,uBAAAA,M,KAKL,IACMa,EAAoB,SAACC,GAAD,OAAmCA,EAAc,eAAiB,sBACtFC,EAAoB,SAACD,GAAD,OACxBA,EAAc,cAACH,EAAA,EAAD,CAAeC,GAAG,+BAAkC,cAACD,EAAA,EAAD,CAAeC,GAAG,iCAEhFI,EAAiB,SAACC,GACtB,MAA+BA,EAAKC,UAA5BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,QACnB,EAA8CJ,EAAKK,KAA3CC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,SAAUC,EAA3B,EAA2BA,eAE3B,MAAO,CACL,CAAEC,SAAUP,GACZ,CAAEQ,QAASP,GACX,CAAEC,QAASA,GACX,CAAEE,QAASA,GACX,CAAE,eAAgBK,kBAAO,IAAIC,KAAKZ,EAAKK,KAAKQ,oBAAsB,IAAK,eACvE,CAAE,uBAAwBN,GAC1B,CAAE,gBAAiBC,KA8CRM,UA1Ce,WAC5B,IArBqBjB,EAqBfV,EAAWC,cACTF,EAAW6B,cAAX7B,OACFc,EAAOgB,YAAYC,YAAe/B,IAQxC,OAJAgC,qBAAU,WACHlB,GAAMb,EAASgC,YAAYjC,MAC/B,CAACC,EAAUa,EAAMd,IAEfc,EAGH,qCACE,eAACoB,EAAA,EAAD,CACEC,QAASrB,EAAKK,KAAKiB,SAASC,KAAKC,OACjCC,YAAY,YACZC,QAAM,EACNC,eAAgB,cAAC,EAAD,CAAoB1C,MAAOe,EAAK4B,OAAOC,QAAS3C,OAAQc,EAAKL,KAJ/E,UAME,oBAAIF,UAAU,2BAAd,SAA0CO,EAAKK,KAAKH,OAEpD,sBACEX,QAnBe,kBAAMJ,EAAS2C,YAAY5C,KAoB1CO,UAAS,8BA7CII,EA6CkCG,EAAK4B,OAAOC,QA7CpBhC,EAAcd,EAAcgD,QAAUhD,EAAciD,WA6ClF,gBAFX,UAIE,mBAAGvC,UAAU,qCAAb,SAAmDG,EAAkBI,EAAK4B,OAAOC,WAChF/B,EAAkBE,EAAK4B,OAAOC,eAInC,cAACI,EAAA,EAAD,CACEC,OAAQ,YACRC,YAAanC,EAAKK,KAAK8B,YAAYC,KACnCC,YAAarC,EAAKK,KAAKiB,SAASe,YAAYC,KAAI,SAACC,GAAD,OAAgBA,EAAWf,UAC3EgB,oBAAqBzC,EAAeC,QAzBxB","file":"static/js/tool-details.41228a0f.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport format from 'date-fns/format';\n\nimport DetailsHeader from '../../components/headers/DetailsHeader/DetailsHeader';\nimport InformationDetails from '../../components/InformationDetails/InformationDetails';\nimport { HatTool } from './hat-tool.interface';\nimport { getToolById, selectToolById, connectTool } from './toolsSlice';\nimport ToolDetailsactions from './ToolDetailsActions';\nimport FormatMessage from '../messages/FormatMessage';\n\nenum HatToolStatus {\n  RUNNING = 'running',\n  UNTOUCHED = 'untouched',\n}\n\nconst getToolStatus = (toolEnabled: boolean) => (toolEnabled ? HatToolStatus.RUNNING : HatToolStatus.UNTOUCHED);\nconst getToolStatusIcon = (toolEnabled: boolean): string => (toolEnabled ? 'check_circle' : 'add_circle_outline');\nconst getToolStatusText = (toolEnabled: boolean) =>\n  toolEnabled ? <FormatMessage id=\"ds.hat.tool.actions.active\" /> : <FormatMessage id=\"ds.hat.tool.actions.connect\" />;\n\nconst getToolDetails = (tool: HatTool): Array<{ [key: string]: string }> => {\n  const { name, url, country } = tool.developer;\n  const { version, termsUrl, supportContact } = tool.info;\n\n  return [\n    { provider: name },\n    { website: url },\n    { country: country },\n    { version: version },\n    { 'last updated': format(new Date(tool.info.versionReleaseDate || ''), 'dd/MM/yyyy') },\n    { 'terms and conditions': termsUrl },\n    { 'support email': supportContact },\n  ];\n};\n\nconst ToolDetails: React.FC = () => {\n  const dispatch = useDispatch();\n  const { toolId } = useParams<{ toolId: string }>();\n  const tool = useSelector(selectToolById(toolId));\n\n  const onConnectClick = () => dispatch(connectTool(toolId));\n\n  useEffect(() => {\n    if (!tool) dispatch(getToolById(toolId));\n  }, [dispatch, tool, toolId]);\n\n  if (!tool) return null;\n\n  return (\n    <>\n      <DetailsHeader\n        logoSrc={tool.info.graphics.logo.normal}\n        logoAltText=\"Tool Logo\"\n        isTool\n        toolbarActions={<ToolDetailsactions setup={tool.status.enabled} toolId={tool.id} />}\n      >\n        <h3 className=\"app-details-header-title\">{tool.info.name}</h3>\n\n        <div\n          onClick={onConnectClick}\n          className={`app-details-status ${getToolStatus(tool.status.enabled)} link-button`}\n        >\n          <i className=\"material-icons details-button-icon\">{getToolStatusIcon(tool.status.enabled)}</i>\n          {getToolStatusText(tool.status.enabled)}\n        </div>\n      </DetailsHeader>\n\n      <InformationDetails\n        header={'Tool Info'}\n        description={tool.info.description.text}\n        screenshots={tool.info.graphics.screenshots.map((screenshot) => screenshot.normal)}\n        informationListData={getToolDetails(tool)}\n      />\n    </>\n  );\n};\n\nexport default ToolDetails;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { disconnectTool } from './toolsSlice';\nimport ActionMenu from '../../components/Menus/ActionMenu';\nimport FormatMessage from '../messages/FormatMessage';\n\nconst ToolDetailsActions: React.FC<{ setup: boolean; toolId: string }> = ({ setup, toolId }) => {\n  const dispatch = useDispatch();\n  const onDisconnect = () => dispatch(disconnectTool(toolId));\n\n  return (\n    <ActionMenu showOptions={setup}>\n      <button onClick={onDisconnect} className=\"actions-menu-item\">\n        <i className=\"material-icons\">link_off</i> <FormatMessage id=\"ds.hat.tool.actions.disconnect\" />\n      </button>\n    </ActionMenu>\n  );\n};\n\nexport default ToolDetailsActions;\n"],"sourceRoot":""}