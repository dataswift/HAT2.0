{"version":3,"sources":["../../index.tsx","../node_modules/date-fns/esm/addMinutes/index.js","../node_modules/date-fns/esm/constants/index.js","../node_modules/date-fns/esm/parseISO/index.js"],"names":["ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","for","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_PREFIX_R","RegExp","LIST_ITEM_R","LIST_R","LINK_INSIDE","LINK_R","IMAGE_R","NON_PARAGRAPH_BLOCK_SYNTAXES","BLOCK_SYNTAXES","slugify","str","replace","parseTableAlignCapture","alignCapture","test","parseTableRow","source","parse","state","prevInTable","_inTable","tableRow","trim","cells","forEach","node","i","type","length","push","content","parseTable","capture","_inline","header","align","split","map","rowText","getTableStyle","colIndex","textAlign","inlineRegex","regex","exec","simpleInlineRegex","_simple","blockRegex","anyScopeRegex","matchParagraph","prevCapturedString","endsWith","match","every","some","line","captured","trimEnd","sanitizeUrl","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","result","parseSimpleInline","parseBlock","Priority","parseCaptureInline","captureNothing","renderNothing","cx","filter","Boolean","join","get","src","path","fb","ptr","frags","shift","getTag","tag","overrides","override","compiler","markdown","options","createElementFn","createElement","React","h","props","overrideProps","className","undefined","compile","input","forceInline","forceBlock","arr","emitter","parser","pop","wrapper","jsx","forceWrapper","key","attrStringToMap","attributes","raw","index","delimiterIdx","indexOf","slice","_","letter","toUpperCase","value","first","mappedKey","normalizedValue","styles","kvPair","substr","footnotes","refs","rules","blockQuote","_match","_order","HIGH","_parse","_react","output","_key","breakLine","__","breakThematic","codeBlock","MAX","lang","codeFenced","codeInline","LOW","footnote","identifier","footnoteReference","target","href","gfmTask","completed","checked","readOnly","heading","id","level","headingSetext","htmlComment","image","alt","title","link","linkAngleBraceStyleDetector","linkBareUrlDetector","_inAnchor","linkMailtoDetector","address","list","prevCapture","isStartOfLine","_list","bullet","ordered","start","items","lastItemWasAParagraph","item","space","spaceRegex","isLastItem","thisItemIsAParagraph","adjustedContent","oldStateInline","oldStateList","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","style","row","c","tableSeparator","text","MIN","full","inner","textBolded","MED","textEmphasized","textEscaped","textStrikethroughed","disableParsingRawHTML","htmlBlock","trimmer","trimmed","parseFunc","r","tagName","noInnerParse","attrs","htmlSelfClosing","outputFunc","ruleList","Object","keys","nestedParse","ruleType","rule","currCaptureString","substring","parsed","sort","typeA","typeB","orderA","orderB","ast","nestedReactOutput","Array","isArray","oldKey","lastWasString","nodeOut","isString","def","children","addMinutes","dirtyDate","dirtyAmount","requiredArgs","arguments","amount","toInteger","addMilliseconds","Math","pow","millisecondsInHour","parseISO","argument","dirtyOptions","additionalDigits","RangeError","prototype","toString","call","Date","NaN","date","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","year","isNaN","getTime","offset","timestamp","time","parseTime","timezone","setFullYear","getUTCFullYear","getUTCMonth","getUTCDate","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseTimezone","patterns","dateTimeDelimiter","timeZoneDelimiter","dateRegex","timeRegex","timezoneRegex","dateString","timeString","array","token","captures","parseInt","century","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","_year","validateWeekDate","isoWeekYear","setUTCFullYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","max","hours","parseTimeUnit","minutes","seconds","validateTime","parseFloat","timezoneString","sign","_hours","validateTimezone"],"mappings":"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","file":"static/js/20.4ad8368e.chunk.js","sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _inAnchor?: boolean\n    _inline?: boolean\n    _inTable?: boolean\n    _key?: React.Key\n    _list?: boolean\n    _simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: Priority\n    _parse: MarkdownToJSX.Parser<ParserOutput>\n    _react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.Props<any>,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entites are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce((obj, x) => ((obj[x.toLowerCase()] = x), obj), { for: 'htmlFor' })\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  '^' +\n    LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_COMMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state._inTable\n  state._inTable = true\n  const tableRow = parse(source.trim(), state)\n  state._inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state._inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state._inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: JSX.IntrinsicAttributes,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type]._order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA]._order\n    let orderB = rules[typeB]._order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule._match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule._parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state._inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state._inline || state._simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state._key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state._key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state._key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = true\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = false\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  content,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  state._inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<ReturnType<typeof parseInline>> =\n  (capture, parse, state: MarkdownToJSX.State) => {\n    return {\n      content: parseInline(parse, capture[1], state),\n    }\n  }\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type]._react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          _inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): React.Props<any> {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function (map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[mappedKey] =\n              attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              )\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <blockquote key={state._key}>\n            {output(node.content, state)}\n          </blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <br key={state._key} />\n      },\n    },\n\n    breakThematic: {\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <hr key={state._key} />\n      },\n    },\n\n    codeBlock: {\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      _react(node, output, state) {\n        return (\n          <pre key={state._key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return <code key={state._key}>{node.content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    footnoteReference: {\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a key={state._key} href={sanitizeUrl(node.target)}>\n            <sup key={state._key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state._key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    heading: {\n      _match: blockRegex(HEADING_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      _react(node, output, state) {\n        node.tag = `h${node.level}` as MarkdownToJSX.HTMLTags\n        return (\n          <node.tag id={node.id} key={state._key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      id: string\n      level: number\n      tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    image: {\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a\n            key={state._key}\n            href={sanitizeUrl(node.target)}\n            title={node.title}\n          >\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      target: string\n      title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      _match: (source, state) => {\n        if (state._inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      _match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state._list || !state._inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function (item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state._inline depending\n          // on our list's looseness.\n          const oldStateInline = state._inline\n          const oldStateList = state._list\n          state._list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state._inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state._inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state._inline = oldStateInline\n          state._list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      _react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state._key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      items: MarkdownToJSX.ParserResult[]\n      ordered: boolean\n      start?: number\n    }>,\n\n    newlineCoalescer: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      _match: matchParagraph,\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <p key={state._key}>{output(node.content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    refImage: {\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state._key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state._key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      fallbackContent: MarkdownToJSX.ParserResult\n      ref: string\n    }>,\n\n    table: {\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _react(node, output, state) {\n        return (\n          <table key={state._key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      _match: function (source, state) {\n        if (!state._inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      _order: Priority.HIGH,\n      _parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      _react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      _react(node /*, output, state*/) {\n        return node.content\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    textBolded: {\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <strong key={state._key}>{output(node.content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <em key={state._key}>{output(node.content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <del key={state._key}>{output(node.content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key]._match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key]._parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state._inAnchor = state._inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state._inAnchor = false\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          content,\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state._key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as MarkdownToJSX.ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<MarkdownToJSX.NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return <node.tag {...node.attrs} key={state._key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def.identifier)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { _inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.Props<any>\n  )\n}\n\nexport default Markdown\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nexport default function addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;","import { millisecondsInHour, millisecondsInMinute } from \"../constants/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? 2 : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: NaN,\n    restDateString: ''\n  };\n  var year = captures[1] ? parseInt(captures[1]) : null;\n  var century = captures[2] ? parseInt(captures[2]) : null; // either year or century is null, not both\n\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return new Date(NaN);\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}"],"sourceRoot":""}