{"version":3,"sources":["features/settings/SettingsList.tsx","features/settings/Logout.tsx","features/settings/Settings.tsx"],"names":["SettingsList","className","FormatMessage","id","config","settingsPrivateDataMenu","map","item","to","link","key","display","icon","settingsMenu","includes","onClick","window","location","href","onExternalClick","version","Logout","dispatch","useDispatch","logout","Settings","profileRecord","useSelector","selectProfile","userHatName","selectUserHatName","userHatDomain","selectUserHatDomain","databaseStorage","selectSystemStatusDatabaseStorage","databaseUsed","selectSystemStatusUsedPercentage","useEffect","getProfile","profile","storagePercentage","databaseUsedPercentage","kind","metric","parsed","parseInt","isNaN","getStoragePercentage","DetailsHeader","logoSrc","photo","avatar","defaultIcon","logoAltText","backgroundColor","ProgressBar","progress","units"],"mappings":"yQA4EeA,EA9DmC,WAGhD,OACE,yBAAKC,UAAU,yBACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,uBACZ,kBAACC,EAAA,EAAD,CAAeC,GAAG,6CAGnBC,IAAOC,wBAAwBC,KAAI,SAACC,GACnC,OACE,kBAAC,IAAD,CAAMC,GAAID,EAAKE,KAAMR,UAAU,0BAA0BS,IAAKH,EAAKI,SACjE,wBAAIV,UAAU,0BAA0BM,EAAKI,SAC7C,uBAAGV,UAAU,kBAAkBM,EAAKK,UAK1C,wBAAIX,UAAU,uBACZ,kBAACC,EAAA,EAAD,CAAeC,GAAG,0CAGnBC,IAAOS,aAAaP,KAAI,SAACC,GACxB,QA9BcE,EA8BQF,EAAKE,MA7BxBK,SAAS,QAAUL,EAAKK,SAAS,SAAYL,EAAKK,SAAS,UA8B5D,yBAAKb,UAAU,0BAA0Bc,QAAS,kBAxBpC,SAACN,GAAD,OAAmBO,OAAOC,SAASC,KAAOT,EAwBAU,CAAgBZ,EAAKE,OAAOC,IAAKH,EAAKI,SAC5F,wBAAIV,UAAU,0BAA0BM,EAAKI,SAC7C,uBAAGV,UAAU,kBAAkBM,EAAKK,OAGtC,kBAAC,IAAD,CAAMX,UAAU,0BAA0BO,GAAID,EAAKE,KAAMC,IAAKH,EAAKI,SACjE,wBAAIV,UAAU,0BAA0BM,EAAKI,SAC7C,uBAAGV,UAAU,kBAAkBM,EAAKK,OAtC3B,IAACH,KA2ChB,wBAAIR,UAAU,uBACZ,kBAACC,EAAA,EAAD,CAAeC,GAAG,yCAEpB,yBAAKF,UAAU,sBACb,wBAAIA,UAAU,0BAA0BG,IAAOgB,UAGjD,wBAAInB,UAAU,uBACZ,kBAACC,EAAA,EAAD,CAAeC,GAAG,wCAEpB,yBAAKF,UAAU,sBACb,wBAAIA,UAAU,0BAAd,YAGF,wBAAIA,UAAU,uBACZ,kBAACC,EAAA,EAAD,CAAeC,GAAG,wCAEpB,yBAAKF,UAAU,sBACb,wBAAIA,UAAU,0BAAd,sBChDKoB,EAdU,WACvB,IAAMC,EAAWC,cAIjB,OACE,yBAAKtB,UAAU,yBACb,4BAAQA,UAAU,iBAAiBc,QAJtB,kBAAMO,EAASE,iBAK1B,kBAACtB,EAAA,EAAD,CAAeC,GAAG,yBCuDXsB,UAzCY,WAAO,IAAD,EACzBH,EAAWC,cACXG,EAAgBC,YAAYC,KAC5BC,EAAcF,YAAYG,KAC1BC,EAAgBJ,YAAYK,KAC5BC,EAAkBN,YAAYO,KAC9BC,EAAeR,YAAYS,KAEjCC,qBAAU,WACHX,GAAeJ,EAASgB,iBAC5B,CAAChB,EAAUI,IAEd,IAAMa,EAAUb,EACVc,EAzBqB,SAACC,GAC5B,KAAI,OAACA,QAAD,IAACA,OAAD,EAACA,EAAwBC,KAAKC,QAAQ,OAAO,EAEjD,IAAMC,EAASC,SAASJ,EAAuBC,KAAKC,QAEpD,OAAIG,MAAMF,GAAgB,EAEtBA,GAAU,IAAY,IAEnBA,EAgBmBG,CAAqBZ,GAE/C,OACE,6BACE,kBAACa,EAAA,EAAD,CACEC,SAAgB,OAAPV,QAAO,IAAPA,GAAA,UAAAA,EAASW,aAAT,eAAgBC,SAAUC,IACnCC,YAAY,iBACZC,gBAAgB,WAEhB,wBAAIrD,UAAU,yBAAyB4B,GACvC,yBAAK5B,UAAU,4BAA4B8B,GAE3C,kBAACwB,EAAA,EAAD,CAAaC,SAAUhB,IAEtBL,GAAgBF,GACf,yBAAKhC,UAAU,4BAAf,UACMuC,EADN,gBAC+BP,EAAgBS,KAAKC,QADpD,OAC6DV,EAAgBS,KAAKe,MADlF,mBAMJ,kBAAC,EAAD,MAEA,kBAAC,EAAD","file":"static/js/settings.91ecd521.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { config } from '../../app.config';\nimport FormatMessage from '../messages/FormatMessage';\n\nexport interface SettingsListProps {}\n\nconst isExternalLink = (link: string): boolean => {\n  if ((!link.includes('.md') && link.includes('http')) || link.includes('mailto')) return true;\n\n  return false;\n};\n\nconst SettingsList: React.FC<SettingsListProps> = () => {\n  const onExternalClick = (link: string) => (window.location.href = link);\n\n  return (\n    <div className=\"settings-list-wrapper\">\n      <div className=\"settings-list\">\n        <h3 className=\"settings-list-title\">\n          <FormatMessage id=\"ds.hat.settings.list.header.privateData\" />\n        </h3>\n\n        {config.settingsPrivateDataMenu.map((item) => {\n          return (\n            <Link to={item.link} className=\"settings-list-item link\" key={item.display}>\n              <h3 className=\"settings-list-row-text\">{item.display}</h3>\n              <i className=\"material-icons\">{item.icon}</i>\n            </Link>\n          );\n        })}\n\n        <h3 className=\"settings-list-title\">\n          <FormatMessage id=\"ds.hat.settings.list.header.settings\" />\n        </h3>\n\n        {config.settingsMenu.map((item) => {\n          return isExternalLink(item.link) ? (\n            <div className=\"settings-list-item link\" onClick={() => onExternalClick(item.link)} key={item.display}>\n              <h3 className=\"settings-list-row-text\">{item.display}</h3>\n              <i className=\"material-icons\">{item.icon}</i>\n            </div>\n          ) : (\n            <Link className=\"settings-list-item link\" to={item.link} key={item.display}>\n              <h3 className=\"settings-list-row-text\">{item.display}</h3>\n              <i className=\"material-icons\">{item.icon}</i>\n            </Link>\n          );\n        })}\n\n        <h3 className=\"settings-list-title\">\n          <FormatMessage id=\"ds.hat.settings.list.header.version\" />\n        </h3>\n        <div className=\"settings-list-item\">\n          <h3 className=\"settings-list-row-text\">{config.version}</h3>\n        </div>\n\n        <h3 className=\"settings-list-title\">\n          <FormatMessage id=\"ds.hat.settings.list.header.vendor\" />\n        </h3>\n        <div className=\"settings-list-item\">\n          <h3 className=\"settings-list-row-text\">HAT App</h3>\n        </div>\n\n        <h3 className=\"settings-list-title\">\n          <FormatMessage id=\"ds.hat.settings.list.header.issuer\" />\n        </h3>\n        <div className=\"settings-list-item\">\n          <h3 className=\"settings-list-row-text\">Dataswift Ltd.</h3>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsList;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logout } from '../authentication/authenticationSlice';\nimport FormatMessage from '../messages/FormatMessage';\n\nimport './Settings.scss';\n\nconst Logout: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const onLogout = () => dispatch(logout());\n\n  return (\n    <div className=\"settings-user-actions\">\n      <button className=\"btn btn-accent\" onClick={onLogout}>\n        <FormatMessage id=\"ds.auth.logoutBtn\" />\n      </button>\n    </div>\n  );\n};\n\nexport default Logout;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport DetailsHeader from '../../components/headers/DetailsHeader/DetailsHeader';\nimport { selectUserHatDomain, selectUserHatName } from '../authentication/authenticationSlice';\nimport {\n  selectSystemStatusDatabaseStorage,\n  selectSystemStatusUsedPercentage,\n} from '../system-status/systemStatusSlice';\nimport ProgressBar from '../../components/ProgressBar/ProgressBar';\nimport { SystemStatusInterface } from '../system-status/system-status.interface';\nimport defaultIcon from '../../assets/icons/user-account-icon-blue.svg';\nimport './Settings.scss';\nimport { getProfile, selectProfile } from '../profile/profileSlice';\nimport SettingsList from './SettingsList';\nimport Logout from './Logout';\n\nconst getStoragePercentage = (databaseUsedPercentage?: SystemStatusInterface): number => {\n  if (!databaseUsedPercentage?.kind.metric) return 0;\n\n  const parsed = parseInt(databaseUsedPercentage.kind.metric);\n\n  if (isNaN(parsed)) return 0;\n\n  if (parsed >= 100) return 100;\n\n  return parsed;\n};\n\nconst Settings: React.FC = () => {\n  const dispatch = useDispatch();\n  const profileRecord = useSelector(selectProfile);\n  const userHatName = useSelector(selectUserHatName);\n  const userHatDomain = useSelector(selectUserHatDomain);\n  const databaseStorage = useSelector(selectSystemStatusDatabaseStorage);\n  const databaseUsed = useSelector(selectSystemStatusUsedPercentage);\n\n  useEffect(() => {\n    if (!profileRecord) dispatch(getProfile());\n  }, [dispatch, profileRecord]);\n\n  const profile = profileRecord;\n  const storagePercentage = getStoragePercentage(databaseUsed);\n\n  return (\n    <div>\n      <DetailsHeader\n        logoSrc={profile?.photo?.avatar || defaultIcon}\n        logoAltText=\"Profile Avatar\"\n        backgroundColor=\"#f6f6f6\"\n      >\n        <h3 className=\"settings-header-title\">{userHatName}</h3>\n        <div className=\"settings-header-headline\">{userHatDomain}</div>\n\n        <ProgressBar progress={storagePercentage} />\n\n        {databaseUsed && databaseStorage && (\n          <div className=\"settings-header-headline\">\n            {`${storagePercentage}% of ${databaseStorage.kind.metric}${databaseStorage.kind.units} storage used`}\n          </div>\n        )}\n      </DetailsHeader>\n\n      <SettingsList />\n\n      <Logout />\n    </div>\n  );\n};\n\nexport default Settings;\n"],"sourceRoot":""}