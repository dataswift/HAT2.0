{"version":3,"sources":["features/tools/ToolDetails.tsx","features/tools/ToolDetailsActions.tsx"],"names":["HatToolStatus","ToolDetailsActions","setup","toolId","dispatch","useDispatch","ActionMenu","showOptions","onClick","disconnectTool","className","FormatMessage","id","getToolDetails","tool","developer","name","url","country","info","version","termsUrl","supportContact","provider","website","format","Date","versionReleaseDate","ToolDetails","toolEnabled","useParams","useSelector","selectToolById","useEffect","getToolById","DetailsHeader","logoSrc","graphics","logo","normal","logoAltText","isTool","toolbarActions","status","enabled","connectTool","RUNNING","UNTOUCHED","getToolStatusIcon","getToolStatusText","InformationDetails","header","description","text","screenshots","map","screenshot","informationListData"],"mappings":"gIAYKA,E,+ECQUC,EAb0D,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC3EC,EAAWC,cAGjB,OACE,kBAACC,EAAA,EAAD,CAAYC,YAAaL,GACvB,4BAAQM,QAJS,kBAAMJ,EAASK,YAAeN,KAIhBO,UAAU,qBACvC,uBAAGA,UAAU,kBAAb,YADF,IAC6C,kBAACC,EAAA,EAAD,CAAeC,GAAG,uC,SDFhEZ,K,kBAAAA,E,uBAAAA,M,KAKL,IAKMa,EAAiB,SAACC,GAAqD,IAAD,EAC3CA,EAAKC,UAA5BC,EADkE,EAClEA,KAAMC,EAD4D,EAC5DA,IAAKC,EADuD,EACvDA,QADuD,EAE5BJ,EAAKK,KAA3CC,EAFkE,EAElEA,QAASC,EAFyD,EAEzDA,SAAUC,EAF+C,EAE/CA,eAE3B,MAAO,CACL,CAAEC,SAAUP,GACZ,CAAEQ,QAASP,GACX,CAAEC,QAASA,GACX,CAAEE,QAASA,GACX,CAAE,eAAgBK,YAAO,IAAIC,KAAKZ,EAAKK,KAAKQ,oBAAsB,IAAK,eACvE,CAAE,uBAAwBN,GAC1B,CAAE,gBAAiBC,KA8CRM,UA1Ce,WAC5B,IArBqBC,EAqBfzB,EAAWC,cACTF,EAAW2B,cAAX3B,OACFW,EAAOiB,YAAYC,YAAe7B,IAQxC,OAJA8B,qBAAU,WACHnB,GAAMV,EAAS8B,YAAY/B,MAC/B,CAACC,EAAUU,EAAMX,IAEfW,EAGH,oCACE,kBAACqB,EAAA,EAAD,CACEC,QAAStB,EAAKK,KAAKkB,SAASC,KAAKC,OACjCC,YAAY,YACZC,QAAM,EACNC,eAAgB,kBAAC,EAAD,CAAoBxC,MAAOY,EAAK6B,OAAOC,QAASzC,OAAQW,EAAKF,MAE7E,wBAAIF,UAAU,4BAA4BI,EAAKK,KAAKH,MAEpD,yBACER,QAnBe,kBAAMJ,EAASyC,YAAY1C,KAoB1CO,UAAS,8BA7CImB,EA6CkCf,EAAK6B,OAAOC,QA7CpBf,EAAc7B,EAAc8C,QAAU9C,EAAc+C,WA6ClF,iBAET,uBAAGrC,UAAU,sCA9CG,SAACmB,GAAD,OAAmCA,EAAc,eAAiB,qBA8C/BmB,CAAkBlC,EAAK6B,OAAOC,UA7CjE,SAACf,GAAD,OACxBA,EAAc,kBAAClB,EAAA,EAAD,CAAeC,GAAG,+BAAkC,kBAACD,EAAA,EAAD,CAAeC,GAAG,gCA6C3EqC,CAAkBnC,EAAK6B,OAAOC,WAInC,kBAACM,EAAA,EAAD,CACEC,OAAQ,YACRC,YAAatC,EAAKK,KAAKiC,YAAYC,KACnCC,YAAaxC,EAAKK,KAAKkB,SAASiB,YAAYC,KAAI,SAACC,GAAD,OAAgBA,EAAWjB,UAC3EkB,oBAAqB5C,EAAeC,MAzBxB","file":"static/js/tool-details.657d2bc7.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport format from 'date-fns/format';\n\nimport DetailsHeader from '../../components/headers/DetailsHeader/DetailsHeader';\nimport InformationDetails from '../../components/InformationDetails/InformationDetails';\nimport { HatTool } from './hat-tool.interface';\nimport { getToolById, selectToolById, connectTool } from './toolsSlice';\nimport ToolDetailsactions from './ToolDetailsActions';\nimport FormatMessage from '../messages/FormatMessage';\n\nenum HatToolStatus {\n  RUNNING = 'running',\n  UNTOUCHED = 'untouched',\n}\n\nconst getToolStatus = (toolEnabled: boolean) => (toolEnabled ? HatToolStatus.RUNNING : HatToolStatus.UNTOUCHED);\nconst getToolStatusIcon = (toolEnabled: boolean): string => (toolEnabled ? 'check_circle' : 'add_circle_outline');\nconst getToolStatusText = (toolEnabled: boolean) =>\n  toolEnabled ? <FormatMessage id=\"ds.hat.tool.actions.active\" /> : <FormatMessage id=\"ds.hat.tool.actions.connect\" />;\n\nconst getToolDetails = (tool: HatTool): Array<{ [key: string]: string }> => {\n  const { name, url, country } = tool.developer;\n  const { version, termsUrl, supportContact } = tool.info;\n\n  return [\n    { provider: name },\n    { website: url },\n    { country: country },\n    { version: version },\n    { 'last updated': format(new Date(tool.info.versionReleaseDate || ''), 'dd/MM/yyyy') },\n    { 'terms and conditions': termsUrl },\n    { 'support email': supportContact },\n  ];\n};\n\nconst ToolDetails: React.FC = () => {\n  const dispatch = useDispatch();\n  const { toolId } = useParams<{ toolId: string }>();\n  const tool = useSelector(selectToolById(toolId));\n\n  const onConnectClick = () => dispatch(connectTool(toolId));\n\n  useEffect(() => {\n    if (!tool) dispatch(getToolById(toolId));\n  }, [dispatch, tool, toolId]);\n\n  if (!tool) return null;\n\n  return (\n    <>\n      <DetailsHeader\n        logoSrc={tool.info.graphics.logo.normal}\n        logoAltText=\"Tool Logo\"\n        isTool\n        toolbarActions={<ToolDetailsactions setup={tool.status.enabled} toolId={tool.id} />}\n      >\n        <h3 className=\"app-details-header-title\">{tool.info.name}</h3>\n\n        <div\n          onClick={onConnectClick}\n          className={`app-details-status ${getToolStatus(tool.status.enabled)} link-button`}\n        >\n          <i className=\"material-icons details-button-icon\">{getToolStatusIcon(tool.status.enabled)}</i>\n          {getToolStatusText(tool.status.enabled)}\n        </div>\n      </DetailsHeader>\n\n      <InformationDetails\n        header={'Tool Info'}\n        description={tool.info.description.text}\n        screenshots={tool.info.graphics.screenshots.map((screenshot) => screenshot.normal)}\n        informationListData={getToolDetails(tool)}\n      />\n    </>\n  );\n};\n\nexport default ToolDetails;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { disconnectTool } from './toolsSlice';\nimport ActionMenu from '../../components/Menus/ActionMenu';\nimport FormatMessage from '../messages/FormatMessage';\n\nconst ToolDetailsActions: React.FC<{ setup: boolean; toolId: string }> = ({ setup, toolId }) => {\n  const dispatch = useDispatch();\n  const onDisconnect = () => dispatch(disconnectTool(toolId));\n\n  return (\n    <ActionMenu showOptions={setup}>\n      <button onClick={onDisconnect} className=\"actions-menu-item\">\n        <i className=\"material-icons\">link_off</i> <FormatMessage id=\"ds.hat.tool.actions.disconnect\" />\n      </button>\n    </ActionMenu>\n  );\n};\n\nexport default ToolDetailsActions;\n"],"sourceRoot":""}