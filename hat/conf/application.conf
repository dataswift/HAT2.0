include "base.conf"

play {
  http {
    secret.key = "[changeme]"
    secret.key = ${?APPLICATION_SECRET}
    errorHandler = "org.hatdex.hat.utils.ErrorHandler"
    forwarded.trustedProxies=["0.0.0.0/0", "::/0"]
  }

  assets {
    path = "/public"
    urlPrefix = "/assets"
  }

  modules {
    enabled += "org.hatdex.hat.modules.SilhouetteModule"
    enabled += ${hat.serverProviderModule}
    enabled += "org.hatdex.hat.modules.FileManagerModule"
    enabled += "org.hatdex.hat.modules.DataMonitoringModule"
    enabled += "org.hatdex.hat.modules.SHEModule"

    disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
    disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

    cacheProviderEnabled = "com.github.mumoshu.play2.memcached.MemcachedModule"
    cacheProviderDisabled = "play.api.cache.ehcache.EhCacheModule"
    enabled += ${play.modules.cacheProviderEnabled}
    disabled += ${play.modules.cacheProviderDisabled}
  }

  filters {

    cors {
      pathPrefixes = [
        "/users",
        "/system/update",
        "/api/v2",
        "/publickey"
      ]
      allowedOrigins = null
      allowedHttpHeaders = ["Accept",
        "Accept-Encoding",
        "Accept-Language",
        "Authorization",
        "Content-Type",
        "Host",
        "Origin",
        "Referer",
        "User-Agent",
        "X-Requested-With",
        "X-Auth-Token"]
      preflightMaxAge = 3 days,
      supportsCredentials = true // Allows for cookies to work with sticky loadbalancer sessions
    }

    csrf.header.bypassHeaders {
      X-Requested-With = "*"
      Csrf-Token = "nocheck"
    }

    headers {
      scriptSources = "'self' https://apis.google.com https://cdnjs.cloudflare.com/ajax/libs/"
      fontSources = "'self' https://fonts.gstatic.com https://cdnjs.cloudflare.com/ajax/libs/"
      styleSources = "'self' 'unsafe-inline' https://fonts.googleapis.com https://cdnjs.cloudflare.com/ajax/libs/ https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css"
      contentSecurityPolicy = script-src ${play.filters.headers.scriptSources}; style-src ${play.filters.headers.styleSources}; font-src ${play.filters.headers.fontSources}
      allowActionSpecificHeaders = true
    }

    hosts {
      # Allow requests to hubofallthings.net, hubat.net (and their subdomains) and the HAT_DOMAIN configured as an enironment variable.
      allowed = [".hubofallthings.net", ".hubat.net", ${?HAT_DOMAIN}]
    }

    enabled = []
//    enabled += "play.filters.headers.SecurityHeadersFilter"
    enabled += "play.filters.hosts.AllowedHostsFilter"
    enabled += "play.filters.cors.CORSFilter"
    enabled += "play.filters.gzip.GzipFilter"
    enabled += "org.hatdex.hat.utils.LoggingFilter"
    enabled += "org.hatdex.hat.utils.TLSFilter"
  }

  cache.bindCaches = ["session-cache", "user-cache"]
}
memcached.host="127.0.0.1:11211" // TODO: DI failing even if memcached module disabled

elasticache.config.endpoint=${?ELASTICACHE_CONFIG_ENDPOINT}

playguard {
  # the http header to use for the client IP address.
  # If not set, RequestHeader.remoteAddress will be used
  clientipheader = "X-Forwarded-For"

  filter {
    enabled = true
    global {
      bucket {
        size = 100
        rate = 100
      }
    }
    ip {
      bucket {
        size = 50
        rate = 50
      }
    }
  }
}

dispatcher {
  remote-api {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      fixed-pool-size = 10
    }
  }

  dal {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      core-pool-size-factor = 50
      core-pool-size-min = 10
    }
  }

  async-cache-dispatcher {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      core-pool-size-factor = 50
      core-pool-size-min = 10
    }
  }
}

hat-server-provider-actor-dispatcher {
  mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
}

she-function-execution-actor-dispatcher {
  mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
}

silhouette {
  authenticator.signer.key = "[changeme]" // A unique encryption key
  authenticator.signer.key = ${?AUTHENTICATOR_SIGNER_KEY}
  authenticator.signer.pepper = "[changeme]" // A unique encryption key
  authenticator.signer.pepper = ${?AUTHENTICATOR_SIGNER_pepper}
  authenticator.crypter.key = "[changeme]" // A unique encryption key
  authenticator.crypter.key = ${?AUTHENTICATOR_CRYPTER_KEY}

  authenticator.fieldName = "X-Auth-Token"
  authenticator.issuerClaim = "hat.org"
  authenticator.authenticatorIdleTimeout = 3 days
  authenticator.authenticatorExpiry = 30 days
}

hat {
  tls = false
  schemaMigrations = ["evolutions/hat-database-schema/13_liveEvolutions.sql", "evolutions/hat-database-schema/14_newHat.sql"]
  serverProviderModule = "org.hatdex.hat.modules.HatTestServerProviderModule"
  serverProviderModule = ${?HAT_SERVER_PROVIDER}
  serverProvider {
    play.cache {
      bindCaches = ["session-cache", "user-cache"]
      createBoundCaches = true
      dispatcher = "dispatcher.async-cache-dispatcher"
      configResource = "ehcache-default.xml"
    }
  }
}

resourceManagement {
  serverProvisioningTimeout = 5 seconds
  serverIdleTimeout = 3 minutes
  serverIdleTimeout = ${?RESOURCE_MGMT_SERVER_IDLE_TIMEOUT}
  millinerAddress = "http://milliner.hat.org:9000"
  millinerAddress = ${?MILLINER_ADDRESS}
  hatSharedSecret = ""
  hatSharedSecret = ${?HAT_SHARED_SECRET}
  hatDBThreads = 5
  hatDBThreads = ${?HAT_DB_THREADS}
  hatDBIdleTimeout = 30 seconds
  hatDBIdleTimeout = ${?HAT_DB_IDLE_TIMEOUT}
}

storage {
  s3Configuration {
    bucketName = ""
    bucketName = ${?HAT_STORAGE_S3_BUCKET}
    accessKeyId = ""
    accessKeyId = ${?HAT_STORAGE_ACCESS_KEY_ID}
    region = "eu-west-1"
    region = ${?HAT_STORAGE_REGION}
    secretKey = ""
    secretKey = ${?HAT_STORAGE_SECRET_KEY}
    signedUrlExpiry = 5 minutes
  }
}

exchange {
  admin = ["systems@hatdex.org"]
  admin = [${?HAT_ADMIN_EMAIL}]
  address = "dex.hubofallthings.com"
  scheme = "https://"
  retryLimit = 10
  retryTime = 30 minutes
  batchSize = 20
  storage {
    collectionPeriod = 1 hour
  }
  beta = ${?HAT_BETA}
}

she {
  aws {
    accessKey = ""
    accessKey = ${?SHE_ACCESS_KEY_ID}
    secretKey = ""
    secretKey = ${?SHE_SECRET_KEY}
    region = "eu-west-1"
    region = ${?AWS_REGION}
    logs = "Tail"
  }
  executionDispatcher {
    maxHats = 1000
    messageBatch = 100
    messagePeriod = 120.seconds
    matchingFunctionParallelism = 10
    functionExecutionParallelism = 10
    functionExecutionTimeout = 5.minutes
  }
  functions = [
    {
      id = "data-feed-counter"
      version = "1.0.0"
      baseUrl = "smart-hat-engine-dev"
      namespace = "she"
      endpoint = "insights/activity-records"
    }
    {
      id = "sentiment-tracker"
      version = "1.0.0"
      baseUrl = "smart-hat-engine-dev"
      namespace = "she"
      endpoint = "insights/emotions"
    }
  ]
}

include "phata.conf"
