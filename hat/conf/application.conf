include "base.conf"

include "play.conf"

logging.exclude.paths=["\/healthcheck", "\/metrics","\/$","\/assets"]

memcached.host="127.0.0.1:11211" // TODO: DI failing even if memcached module disabled

elasticache.config.endpoint=${?ELASTICACHE_CONFIG_ENDPOINT}

playguard {
  # the http header to use for the client IP address.
  # If not set, RequestHeader.remoteAddress will be used
  clientipheader = "X-Forwarded-For"

  filter {
    enabled = true
    global {
      bucket {
        size = 100
        rate = 100
      }
    }
    ip {
      bucket {
        size = 50
        rate = 50
      }
    }
  }
}

dispatcher {
  remote-api {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      fixed-pool-size = 10
    }
  }

  dal {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      core-pool-size-min = 2
      core-pool-size-factor = 2.0
      core-pool-size-max = 4
    }
  }

  async-cache-dispatcher {
    executor = "thread-pool-executor"
    throughput = 1
    thread-pool-executor {
      core-pool-size-min = 2
      core-pool-size-factor = 2.0
      core-pool-size-max = 4
    }
  }
}

hat-server-provider-actor-dispatcher {
  mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
}

she-function-execution-actor-dispatcher {
  mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
}

silhouette {
  authenticator.signer.key = "[changeme]" // A unique encryption key
  authenticator.signer.key = ${?AUTHENTICATOR_SIGNER_KEY}
  authenticator.signer.pepper = "[changeme]" // A unique encryption key
  authenticator.signer.pepper = ${?AUTHENTICATOR_SIGNER_pepper}
  authenticator.crypter.key = "[changeme]" // A unique encryption key
  authenticator.crypter.key = ${?AUTHENTICATOR_CRYPTER_KEY}

  authenticator.fieldName = "X-Auth-Token"
  authenticator.issuerClaim = "example.com"
  authenticator.authenticatorIdleTimeout = 3 days
  authenticator.authenticatorExpiry = 30 days
}

hat {
  tls = false
  schemaMigrations = ["evolutions/hat-database-schema/13_liveEvolutions.sql", "evolutions/hat-database-schema/14_newHat.sql"]
  serverProviderModule = "org.hatdex.hat.modules.HatTestServerProviderModule"
  serverProviderModule = ${?HAT_SERVER_PROVIDER}
  serverProvider {
    play.cache {
      bindCaches = ["session-cache", "user-cache"]
      createBoundCaches = true
      dispatcher = "dispatcher.async-cache-dispatcher"
      configResource = "ehcache-default.xml"
    }
  }
}

resourceManagement {
  serverProvisioningTimeout = 5 seconds
  serverIdleTimeout = 3 minutes
  serverIdleTimeout = ${?RESOURCE_MGMT_SERVER_IDLE_TIMEOUT}
  millinerAddress = "https://eu1.hubofallthings.net"
  millinerAddress = ${?MILLINER_ADDRESS}
  hatSharedSecret = ""
  hatSharedSecret = ${?HAT_SHARED_SECRET}
  hatDBThreads = 5
  hatDBThreads = ${?HAT_DB_THREADS}
  hatDBIdleTimeout = 30 seconds
  hatDBIdleTimeout = ${?HAT_DB_IDLE_TIMEOUT}
  hatDBStorageAllowance = 100000000
  hatFileStorageAllowance = 100000000
}

storage {
  s3Configuration {
    bucketName = ""
    bucketName = ${?HAT_STORAGE_S3_BUCKET}
    accessKeyId = ""
    accessKeyId = ${?HAT_STORAGE_ACCESS_KEY_ID}
    region = "eu-west-1"
    region = ${?HAT_STORAGE_REGION}
    secretKey = ""
    secretKey = ${?HAT_STORAGE_SECRET_KEY}
    signedUrlExpiry = 5 minutes
  }
}

exchange {
  admin = ["systems@hatdex.org"]
  admin = [${?HAT_ADMIN_EMAIL}]
  address = "dex.hubofallthings.com"
  address = ${?DEX_ADDRESS}
  scheme = "https://"
  retryLimit = 10
  retryTime = 30 minutes
  batchSize = 20
  storage {
    collectionPeriod = 1 hour
  }
  beta = ${?HAT_BETA}
}

adjudicator {
  address = "contracts.dataswift.dev"
  address = ${?ADJUDICATOR_ADDRESS}
  scheme = "https://"
  sharedSecret = "SyqogHEnVPVUJkCE6fS43/KBl0hrmNUcsMhTPymD1Oc="
  sharedSecret = ${?ADJUDICATOR_SHARED_SECRET}
}

pdaAccountRegistry {
  verificationCallback {
    name = "hatters"
    host = "auth.dataswift.dev"
    host = ${?PDA_REGISTRY_HOST}
    secure = true
    path = "/api/services/daas/claim"
  }
}

include "she.conf"

include "phata.conf"

include "regions.conf"

