{"version":3,"sources":["components/banners/NotificationBanner/NotificationBanner.tsx","features/hat-login/HatLoginParamValidation.tsx","features/hat-login/HatLoginRedirectError.tsx","features/hat-login/HatApplicationHandler.tsx","features/hat-login/HatLoginBuildRedirect.tsx","features/hat-login/HatLoginSetupDependency.tsx","../../node_modules/unquote/index.js","../../index.tsx","features/hmi/hmi.config.ts","features/hat-login/UpdateNotes/UpdateNotes.tsx","features/hat-login/HatLoginHmi.tsx","features/hat-login/HatLogin.tsx"],"names":["NotificationBanner","type","children","fixed","display","className","HatLoginParamValidation","props","dispatch","useDispatch","useEffect","queryString","window","location","search","application_id","name","redirect_uri","redirect","applicationId","applicationIdSafe","toLowerCase","getApplicationsHmi","setRedirectError","HatLoginRedirectError","useState","redirectNotProvided","setRedirectNotProvided","redirectError","useSelector","selectRedirectError","fallback","internal","error","isInternal","redirectWithError","errorReason","redirectParam","replace","callBackUrlWithError","href","RedirectError","environment","sandbox","target","rel","HatLoginApplicationHandler","errorMessage","selectErrorMessage","applications","selectApplications","parentApp","selectParentApp","tools","selectTools","length","find","app","application","id","indexOf","kind","parentPlugDependencies","dependencies","plugs","parentToolDependencies","setParentApp","setDependencyApps","filter","getTools","setDependencyTools","tool","onClick","HatLoginBuildRedirect","dependencyApps","selectDependencyApps","dependencyPlugsAreActive","selectDependencyPlugsAreActive","dependencyToolsAreEnabled","selectDependencyToolsEnabled","buildRedirect","a","hatSvc","HatClientService","getInstance","appLogin","resAppLogin","parsedBody","accessToken","setup","isRedirectUrlValid","url","iosUrl","androidUrl","testingUrl","decodeURI","attemptedSetup","date","addMinutes","Date","sessionStorage","setItem","JSON","stringify","console","warn","sendReport","then","catch","active","needsUpdating","getItem","enabled","session","parse","isFuture","parseISO","HatLoginSetupDependency","plugsAreActive","setupAppDependencies","d","callback","intermediateCallBackUrl","log","appId","split","dependenciesParam","dependencyArray","item","join","map","reg","ATTRIBUTE_TO_JSX_PROP_MAP","accesskey","allowfullscreen","allowtransparency","autocomplete","autofocus","autoplay","cellpadding","cellspacing","charset","class","classid","colspan","contenteditable","contextmenu","crossorigin","enctype","for","formaction","formenctype","formmethod","formnovalidate","formtarget","frameborder","hreflang","inputmode","keyparams","keytype","marginheight","marginwidth","maxlength","mediagroup","minlength","novalidate","radiogroup","readonly","rowspan","spellcheck","srcdoc","srclang","srcset","tabindex","usemap","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","PARAGRAPH_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_PREFIX_R","RegExp","LIST_ITEM_R","LIST_ITEM_PREFIX","LIST_R","LINK_R","IMAGE_R","BLOCK_SYNTAXES","slugify","str","parseTableAlignCapture","alignCapture","test","parseTableRow","source","state","prevInTable","inTable","tableRow","trim","cells","forEach","node","i","push","content","parseTable","capture","inline","header","align","rowText","getTableStyle","colIndex","textAlign","inlineRegex","regex","exec","simpleInlineRegex","simple","blockRegex","anyScopeRegex","sanitizeUrl","decodeURIComponent","match","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","result","parseSimpleInline","parseBlock","Priority","parseCaptureInline","captureNothing","renderNothing","cx","Boolean","get","src","path","fb","ptr","frags","shift","getTag","tag","overrides","override","options","React","cloneElement","markdown","createElementFn","createElement","h","overrideProps","undefined","compile","input","forceInline","forceBlock","jsx","arr","emitter","parser","key","attrStringToMap","attributes","reduce","raw","index","delimiterIdx","slice","_","letter","toUpperCase","value","charAt","substr","mappedKey","normalizedValue","styles","kvPair","footnotes","refs","rules","blockQuote","order","HIGH","react","output","breakLine","__","breakThematic","codeBlock","MAX","lang","codeFenced","codeInline","LOW","footnote","identifier","footnoteReference","gfmTask","completed","checked","readOnly","heading","level","headingSetext","htmlComment","image","alt","title","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","address","list","prevCapture","isStartOfLine","_list","bullet","ordered","start","items","lastItemWasAParagraph","space","spaceRegex","isLastItem","thisItemIsAParagraph","adjustedContent","oldStateInline","oldStateList","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","style","row","c","tableSeparator","text","MIN","full","inner","textBolded","MED","textEmphasized","textEscaped","textStrikethroughed","disableParsingRawHTML","htmlBlock","trimmer","trimmed","parseFunc","some","r","tagName","noInnerParse","attrs","htmlSelfClosing","outputFunc","ruleList","Object","keys","nestedParse","ruleType","rule","currCaptureString","substring","parsed","sort","typeA","typeB","orderA","orderB","ast","nestedReactOutput","Array","isArray","oldKey","lastWasString","nodeOut","isString","def","compiler","hmiConfig","hatdexRating","termsOfService","privacyPolicy","UpdateNotes","onApproved","onRejected","info","updateNotes","HmiActions","FormatMessage","version","graphics","logo","normal","height","width","rating","score","notes","note","HatLoginHmi","hatName","host","language","selectLanguage","dependencyTools","selectDependencyTools","LoadingSpinner","loadingText","onTermsAgreed","onTermsDeclined","hmiType","HmiType","login","daas","HatLogin"],"mappings":"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","file":"static/js/hat_setup_login.3b75b385.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\nimport './NotificationBanner.scss';\n\ntype Props = {\n  type: string;\n  display: boolean;\n  children: ReactNode;\n  fixed?: boolean;\n}\n\nexport const NotificationBanner: React.FC<Props> = ({ type, children, fixed, display }) => {\n  return (\n    <div>\n      {display && (\n        <>\n          <div className={\n            `notification-banner-container \n            notification-banner-container-${ type } \n            ${ fixed ? 'notification-fixed' : null }`\n          }>\n            {type === 'error' && (\n              <i className=\"material-icons notification-banner-container-icon\">warning</i>\n            )}\n            {children}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { getApplicationsHmi } from \"../applications/applicationsSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { setRedirectError } from \"./hatLoginSlice\";\nimport * as queryString from \"query-string\";\n\ntype Props = {\n    children: React.ReactNode;\n}\n\ntype Query = {\n  application_id?: string;\n  name?: string;\n  redirect_uri?: string;\n  redirect?: string;\n}\n\nconst HatLoginParamValidation: React.FC<Props> = props => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const { application_id, name, redirect_uri, redirect } =\n        queryString.parse(window.location.search) as Query;\n    const applicationId = application_id || name;\n    const applicationIdSafe = applicationId?.toLowerCase();\n    const redirectParam = redirect_uri || redirect;\n\n    if (!redirectParam) {\n      dispatch(setRedirectError('application_misconfigured', 'redirect_is_required '));\n      return;\n    }\n\n    if (!applicationIdSafe) {\n      dispatch(setRedirectError('application_misconfigured', 'application_id_is_required '));\n      return;\n    }\n\n    dispatch(getApplicationsHmi(applicationIdSafe));\n  }, [dispatch]);\n\n  return <>{props.children}</>;\n};\n\nexport default HatLoginParamValidation;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectRedirectError } from \"./hatLoginSlice\";\nimport { environment } from \"../../environment\";\nimport * as queryString from \"query-string\";\n\ntype Props = {\n    children: React.ReactNode;\n}\n\ntype Query = {\n  redirect_uri?: string;\n  redirect?: string;\n  fallback?: string;\n  internal?: string;\n}\n\nconst HatLoginRedirectError: React.FC<Props> = props => {\n  const [redirectNotProvided, setRedirectNotProvided] = useState(false);\n  const redirectError = useSelector(selectRedirectError);\n\n  useEffect(() => {\n    const { redirect_uri, redirect, fallback, internal } = queryString.parse(window.location.search) as Query;\n\n    const callBackUrlWithError = (error: string, errorReason: string): string | null => {\n      const redirectParam = redirect_uri || redirect;\n\n      if (fallback) {\n        return fallback;\n      }\n\n      if (redirectParam) {\n        const url = `${ redirectParam }?error=${ error }%26error_reason=${ errorReason }`;\n\n        return url.replace('#', '%23');\n      } else {\n        return null;\n      }\n    };\n\n    if (redirectError && redirectError.error) {\n      const isInternal = internal === 'true';\n\n      const redirectWithError = callBackUrlWithError(redirectError.error, redirectError.errorReason);\n\n      if (!redirectWithError) {\n        setRedirectNotProvided(true);\n        return;\n      }\n\n      if (isInternal) {\n        window.location.href = fallback || redirectWithError;\n      } else {\n        window.location.href = redirectWithError;\n      }\n    }\n  }, [redirectError]);\n\n  const RedirectError = () => {\n    if (environment.sandbox) {\n      return (<div>\n        <div className=\"app-error\">\n          <h3 className=\"app-error-header\">Ooops... Looks like something went wrong.</h3>\n          <p className=\"app-error-text\">\n                ERROR: App details incorrect. \"redirect_uri\" query parameter is missing. <br />\n            <a href={'https://docs.dataswift.io/guides/hat-login/02-send-hat-login'}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\">\n                  Learn more\n            </a>\n          </p>\n        </div>\n      </div>\n      );\n    } else {\n      return (<div>\n        <div className=\"app-error\">\n          <h3 className=\"app-error-header\">Ooops... Looks like something went wrong.</h3>\n          <p className=\"app-error-text\">\n            ERROR: App details incorrect. Please contact the app developer and let them know.\n          </p>\n        </div>\n      </div>\n      );\n    }\n  };\n\n  return <>{redirectNotProvided ? <RedirectError /> : props.children}</>;\n};\n\nexport default HatLoginRedirectError;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectApplications } from \"../applications/applicationsSlice\";\nimport { selectErrorMessage, setRedirectError } from \"./hatLoginSlice\";\nimport { selectParentApp, setDependencyApps, setDependencyTools, setParentApp } from \"../hmi/hmiSlice\";\nimport { getTools, selectTools } from \"../tools/toolsSlice\";\nimport * as queryString from \"query-string\";\n\ntype Props = {\n    children: React.ReactNode;\n}\n\ntype Query = {\n  application_id?: string;\n  name?: string;\n  redirect_uri?: string;\n  redirect?: string;\n  fallback?: string;\n  internal?: string;\n}\n\nconst HatLoginApplicationHandler: React.FC<Props> = props => {\n  const errorMessage = useSelector(selectErrorMessage);\n  const applications = useSelector(selectApplications);\n  const parentApp = useSelector(selectParentApp);\n  const tools = useSelector(selectTools);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (applications && applications.length > 0) {\n      const { application_id, name } = queryString.parse(window.location.search) as Query;\n\n      const applicationId = application_id || name;\n      const applicationIdSafe = applicationId?.toLowerCase();\n      const parentApp = applications.find(app => app.application.id === applicationIdSafe);\n\n      if (!parentApp || (['App', 'DataPlug'].indexOf(parentApp.application.kind.kind) === -1)) {\n        dispatch(setRedirectError('application_misconfigured', 'application_id_not_found '));\n        return;\n      }\n\n      const parentPlugDependencies = parentApp.application.dependencies?.plugs || [];\n      const parentToolDependencies = parentApp.application.dependencies?.tools || [];\n\n      dispatch(setParentApp(parentApp));\n      dispatch(setDependencyApps(applications.filter(app => parentPlugDependencies.indexOf(app.application.id) > -1)));\n\n      if (parentToolDependencies.length > 0) {\n        dispatch(getTools());\n      }\n    }\n\n  }, [applications, dispatch]);\n\n  useEffect(() => {\n    if (tools && tools.length > 0) {\n      if (!parentApp) return;\n\n      const parentToolDependencies = parentApp.application.dependencies?.tools || [];\n\n      dispatch(setDependencyTools(tools.filter(tool => parentToolDependencies.indexOf(tool.id) !== -1)));\n    }\n  }, [parentApp, tools, dispatch]);\n\n  const redirectBack = () => {\n    dispatch(setRedirectError('hat_exception', 'internal_server_error'));\n  };\n\n  if (errorMessage && applications.length === 0) {\n    return (\n      <div>\n        <div className=\"app-error\">\n          <h3 className=\"app-error-header\">Looks like something went wrong</h3>\n          <p className=\"app-error-text\">{errorMessage}</p>\n          <button className={'btn btn-accent'}\n            onClick={() => redirectBack()}>\n            Back\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{props.children}</>;\n};\n\nexport default HatLoginApplicationHandler;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { HatApplication } from \"@dataswift/hat-js/lib/interfaces/hat-application.interface\";\nimport { HatClientService } from \"../../services/HatClientService\";\nimport {\n  selectDependencyApps,\n  selectDependencyPlugsAreActive,\n  selectDependencyToolsEnabled,\n  selectParentApp\n} from \"../hmi/hmiSlice\";\nimport * as queryString from \"query-string\";\nimport { addMinutes, isFuture, parseISO } from \"date-fns\";\n\ntype Props = {\n    children: React.ReactNode;\n}\n\ntype Query = {\n  application_id?: string;\n  name?: string;\n  redirect_uri?: string;\n  redirect?: string;\n  fallback?: string;\n  internal?: string;\n}\n\nconst HatLoginBuildRedirect: React.FC<Props> = props => {\n  const parentApp = useSelector(selectParentApp);\n  const dependencyApps = useSelector(selectDependencyApps);\n  const dependencyPlugsAreActive = useSelector(selectDependencyPlugsAreActive);\n  const dependencyToolsAreEnabled = useSelector(selectDependencyToolsEnabled);\n\n  useEffect(() => {\n    const buildRedirect = async (app: HatApplication) => {\n      const { redirect_uri, redirect, internal } =\n          queryString.parse(window.location.search) as Query;\n\n      const isInternal = internal === 'true';\n      const redirectParam = redirect_uri || redirect;\n\n      if (isInternal) {\n        window.location.href = redirectParam || '';\n      } else {\n        const hatSvc = HatClientService.getInstance();\n\n        try {\n          const resAppLogin = await hatSvc.appLogin(app.application.id);\n\n          if (resAppLogin?.parsedBody?.accessToken) {\n            const { accessToken } = resAppLogin.parsedBody;\n            const setup = app.application.setup;\n\n            // TODO Change this logic to the new validRedirectUris field\n            const isRedirectUrlValid = [setup.url, setup.iosUrl, setup.androidUrl, setup.testingUrl]\n              .indexOf(decodeURI(redirectParam || '')) !== -1;\n\n            const attemptedSetup = {\n              applicationId: app.application.id,\n              date: addMinutes(new Date(), 10)\n            };\n\n            sessionStorage.setItem('attempted_setup', JSON.stringify(attemptedSetup));\n\n            if (isRedirectUrlValid) {\n              // eslint-disable-next-line max-len\n              window.location.href = `${ redirectParam?.replace('#', '%23') }${ (redirectParam?.indexOf('?') !== -1) ? '&' : '?' }token=${ accessToken }`;\n            } else {\n              console.warn('Provided URL is not registered');\n\n              hatSvc.sendReport('hmi_invalid_redirect_url', `${ app.application.id }: ${ redirectParam }`)\n                .then(() => {\n                  // eslint-disable-next-line max-len\n                  window.location.href = `${ redirectParam?.replace('#', '%23') }${ (redirectParam?.indexOf('?') !== -1) ? '&' : '?' }token=${ accessToken }`;\n                }).catch(() => {\n                  // eslint-disable-next-line max-len\n                  window.location.href = `${ redirectParam?.replace('#', '%23') }${ (redirectParam?.indexOf('?') !== -1) ? '&' : '?' }token=${ accessToken }`;\n                });\n            }\n          }\n        } catch (e) {}\n      }\n    };\n\n    if (parentApp &&\n        parentApp.active &&\n        !parentApp.needsUpdating &&\n        dependencyPlugsAreActive &&\n        dependencyToolsAreEnabled) {\n      buildRedirect(parentApp);\n      return;\n    }\n\n    const attemptedSetup = sessionStorage.getItem('attempted_setup');\n\n    if (parentApp && parentApp.enabled && attemptedSetup) {\n      const session = JSON.parse(attemptedSetup) as {applicationId: string, date: string};\n\n      if ((session.applicationId === parentApp.application.id) && isFuture(parseISO(session.date))) {\n        buildRedirect(parentApp);\n        return;\n      }\n    }\n  }, [parentApp, dependencyApps, dependencyPlugsAreActive, dependencyToolsAreEnabled]);\n\n  return <>{props.children}</>;\n};\n\nexport default HatLoginBuildRedirect;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { HatApplication } from \"@dataswift/hat-js/lib/interfaces/hat-application.interface\";\nimport { HatClientService } from \"../../services/HatClientService\";\nimport {\n  selectDependencyApps,\n  selectDependencyPlugsAreActive,\n  selectParentApp\n} from \"../hmi/hmiSlice\";\nimport * as queryString from \"query-string\";\nimport { addMinutes, isFuture, parseISO } from \"date-fns\";\n\ntype Props = {\n    children: React.ReactNode;\n}\n\ntype Query = {\n  application_id?: string;\n  name?: string;\n  redirect_uri?: string;\n  redirect?: string;\n  dependencies?: string;\n}\n\nconst HatLoginSetupDependency: React.FC<Props> = props => {\n  const parentApp = useSelector(selectParentApp);\n  const dependencyApps = useSelector(selectDependencyApps);\n  const plugsAreActive = useSelector(selectDependencyPlugsAreActive);\n\n  useEffect(() => {\n    const { application_id, name, redirect_uri, redirect, dependencies } =\n        queryString.parse(window.location.search) as Query;\n\n    const setupAppDependencies = async (dependencies: HatApplication[]) => {\n      const app = dependencies.filter(d => !d.active)[0];\n      const callback = intermediateCallBackUrl(app.application.id);\n\n      try {\n        const hatSvc = HatClientService.getInstance();\n\n        if (app?.application.id) {\n          const resAppLogin = await hatSvc.appLogin(app.application.id);\n\n          if (resAppLogin?.parsedBody?.accessToken) {\n            const attemptedSetup = {\n              applicationId: parentApp?.application.id,\n              date: addMinutes(new Date(), 10)\n            };\n\n            sessionStorage.setItem('attempted_setup', JSON.stringify(attemptedSetup));\n\n            // eslint-disable-next-line max-len\n            window.location.href = `${ app.application.setup.url }?token=${ resAppLogin.parsedBody.accessToken }&redirect=${ callback }`;\n          }\n        }\n      } catch (e) {\n        console.log('Setup dependencies errored', e);\n      }\n    };\n\n    const intermediateCallBackUrl = (appId?: string): string => {\n      let url = window.location.href.split('?')[0];\n      const applicationId = application_id || name;\n      const applicationIdSafe = applicationId?.toLowerCase();\n      const redirectParam = redirect_uri || redirect;\n      const dependenciesParam = dependencies;\n\n      url += `?application_id=${ applicationIdSafe }%26redirect_uri=${ redirectParam }`;\n\n      if (dependenciesParam) {\n        // removes the application id from the dependency parameter\n        const dependencyArray = dependenciesParam.split(',').filter(item => item !== appId);\n        if (dependencyArray && dependencyArray.length > 0) {\n          url += `%26dependencies=${ dependencyArray.join() }`;\n        }\n      } else {\n        if (dependencyApps) {\n          const dependencyArray = dependencyApps\n            .filter(app => app.application.id !== appId)\n            .map(app => app.application.id);\n          if (dependencyArray && dependencyArray.length > 0) {\n            url += `%26dependencies=${ dependencyArray.join() }`;\n          }\n        }\n      }\n\n      return url.replace('#', '%23');\n    };\n\n    const attemptedSetup = sessionStorage.getItem('attempted_setup');\n\n    if (parentApp && dependencyApps && dependencyApps.length > 0 && attemptedSetup) {\n      const session = JSON.parse(attemptedSetup) as {applicationId: string, date: string};\n\n      if ((session.applicationId === parentApp.application.id) && isFuture(parseISO(session.date))) {\n        return;\n      }\n    }\n\n    if (parentApp && parentApp.active && !plugsAreActive) {\n      setupAppDependencies(dependencyApps);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [parentApp, dependencyApps, plugsAreActive]);\n\n  return <>{props.children}</>;\n};\n\nexport default HatLoginSetupDependency;\n","var reg = /[\\'\\\"]/\n\nmodule.exports = function unquote(str) {\n  if (!str) {\n    return ''\n  }\n  if (reg.test(str.charAt(0))) {\n    str = str.substr(1)\n  }\n  if (reg.test(str.charAt(str.length - 1))) {\n    str = str.substr(0, str.length - 1)\n  }\n  return str\n}\n","/* @jsx h */\n/**\n * markdown-to-jsx@6 is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport React from 'react'\n/// <reference path=\"unquote.d.ts\" />\nimport unquote from 'unquote'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _list?: boolean\n    inline?: boolean\n    inTable?: boolean\n    key?: React.Key\n    simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<ParserOutput>\n    react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ComponentType<any>\n        props: Object\n      }>\n    | React.ComponentType<any>\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.Props<any>,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entites are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = {\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  class: 'className',\n  classid: 'classId',\n  colspan: 'colSpan',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  crossorigin: 'crossOrigin',\n  enctype: 'encType',\n  for: 'htmlFor',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap',\n} as const\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+)\\n{0,2}/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--.*?-->/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\nconst TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R = /(^\\n+|\\n+$|\\s+$)/g\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_COMMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n  PARAGRAPH_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state.inTable\n  state.inTable = true\n  const tableRow = parse(source.trim(), state)\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: Object\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state.inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state.inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: JSX.IntrinsicAttributes,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule.match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(content, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(content, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(parse, content, state): MarkdownToJSX.ParserResult {\n  state.inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<ReturnType<\n  typeof parseInline\n>> = (capture, parse, state) => {\n  return {\n    content: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type].react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.replace(TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R, '')}\\n\\n`,\n        { inline }\n      )\n    )\n\n    let jsx\n    if (arr.length > 1) {\n      jsx = inline ? (\n        <span key=\"outer\">{arr}</span>\n      ) : (\n        <div key=\"outer\">{arr}</div>\n      )\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        jsx = <span key=\"outer\">{jsx}</span>\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = <span key=\"outer\" />\n    }\n\n    return jsx\n  }\n\n  function attrStringToMap(str: string): React.Props<any> {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function (map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[\n              mappedKey\n            ] = attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              )\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  function stripHtmlComments(html) {\n    return html.replace(/<!--[\\s\\S]*?(?:-->)/g, '')\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      react(node, output, state) {\n        return (\n          <blockquote key={state.key}>{output(node.content, state)}</blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    breakThematic: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    codeBlock: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      react(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return <code key={state.key}>{node.content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    footnoteReference: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)}>\n            <sup key={state.key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    heading: {\n      match: blockRegex(HEADING_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      react(node, output, state) {\n        node.tag = `h${node.level}` as MarkdownToJSX.HTMLTags\n        return (\n          <node.tag id={node.id} key={state.key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      id: string\n      level: number\n      tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    image: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)} title={node.title}>\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      target: string\n      title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state._list || !state.inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function (item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state.inline depending\n          // on our list's looseness.\n          const oldStateInline = state.inline\n          const oldStateList = state._list\n          state._list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state.inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state.inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state.inline = oldStateInline\n          state._list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state.key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      items: MarkdownToJSX.ParserResult[]\n      ordered: boolean\n      start?: number\n    }>,\n\n    newlineCoalescer: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      match: blockRegex(PARAGRAPH_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <p key={state.key}>{output(node.content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    refImage: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      fallbackContent: MarkdownToJSX.ParserResult\n      ref: string\n    }>,\n\n    table: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      react(node, output, state) {\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      match: function (source, state) {\n        if (!state.inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      order: Priority.HIGH,\n      parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      react(node /*, output, state*/) {\n        return node.content\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    textBolded: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      react(node, output, state) {\n        return <strong key={state.key}>{output(node.content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      react(node, output, state) {\n        return <em key={state.key}>{output(node.content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <del key={state.key}>{output(node.content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key].match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key].parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          /**\n           * if another html block is detected within, parse as block,\n           * otherwise parse as inline to pick up any further markdown\n           */\n          content: noInnerParse ? capture[3] : parseFunc(parse, trimmed, state),\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state.key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as MarkdownToJSX.ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<MarkdownToJSX.NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      react(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter = reactFor(ruleOutput(rules))\n\n  const jsx = compile(stripHtmlComments(markdown))\n\n  if (footnotes.length) {\n    jsx.props.children.push(\n      <footer key=\"footer\">\n        {footnotes.map(function createFootnote(def) {\n          return (\n            <div id={options.slugify(def.identifier)} key={def.identifier}>\n              {def.identifier}\n              {emitter(parser(def.footnote, { inline: true }))}\n            </div>\n          )\n        })}\n      </footer>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.Props<any>\n  )\n}\n\nexport default Markdown\n","export const hmiConfig = {\n  links: {\n    hatdexRating:\n      'https://resources.dataswift.io/contents/4a9f5153-7d52-4b79-8eb1-e570aa331291',\n    termsOfService:\n      'https://cdn.dataswift.io/legal/hat-owner-terms-of-service.pdf',\n    privacyPolicy:\n      'https://cdn.dataswift.io/legal/dataswift-privacy-policy.pdf',\n  },\n};\n","import { HatApplicationContent } from '@dataswift/hat-js/lib/interfaces/hat-application.interface';\nimport React from 'react';\nimport Markdown from 'markdown-to-jsx';\nimport './UpdateNotes.scss';\nimport FormatMessage from \"../../messages/FormatMessage\";\nimport { hmiConfig } from \"../../hmi/hmi.config\";\n\ntype Props = {\n  app: HatApplicationContent;\n  onApproved: () => void;\n  onRejected: () => void;\n};\nexport const UpdateNotes: React.FC<Props> = ({ app, onApproved, onRejected }) => {\n  if (!app.info.updateNotes) return null;\n\n  const HmiActions: React.FC = () => {\n\n    if (!app) {\n      return null;\n    }\n\n    return (\n      <div className=\"hmi-actions-footer\">\n        <div className=\"sticky-action-panel-content\">\n          <div className=\"action-buttons\">\n            <button className=\"secondary-action\" onClick={() => onRejected()}>\n              <FormatMessage id={'hmi.actions.cancel'} />\n            </button>\n            <button className=\"primary-action\" onClick={() => onApproved()}>\n              <FormatMessage id={'hmi.actions.confirm'} />\n            </button>\n          </div>\n\n          <p className=\"tos-text\">\n            <FormatMessage id={'hmi.actions.agreeWithTermsAndPrivacy.part1'} />\n            <a\n              href={hmiConfig.links.termsOfService}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <FormatMessage\n                id={'hmi.actions.agreeWithTermsAndPrivacy.termsOfService'}\n              />\n            </a>\n                        ,{' '}\n            <a\n              href={hmiConfig.links.privacyPolicy}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <FormatMessage\n                id={'hmi.actions.agreeWithTermsAndPrivacy.privacyPolicy'}\n              />\n            </a>\n            <FormatMessage id={'hmi.actions.agreeWithTermsAndPrivacy.part2'} />\n          </p>\n\n          <p className=\"hmi-id-text\">\n                        HMI ID: {app.id}-{app.info.version}\n          </p>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"content-wrapper flex-column-wrapper flex-align-items-center\">\n      <section className=\"title-section\">\n        <div className=\"app-logo-wrapper\">\n          <img src={app.info.graphics.logo.normal}\n            className=\"app-logo\" \n            height=\"100\"\n            width=\"100\"\n            alt={`${ app.info.name } logo`}\n          />\n        </div>\n        {app.kind.kind === 'App' && (\n          <div className=\"app-rating-wrapper\">\n            <div className=\"app-rating\">\n              <span className=\"app-rating-highlighted\">{app.info.rating.score}&nbsp;</span>\n            </div>\n          </div>\n        )}\n\n        <h3 className=\"title-section-heading\">{app.info.name}</h3>\n        <div className=\"title-section-text\">\n          <Markdown>{app.info.updateNotes.header}</Markdown>\n        </div>\n      </section>\n\n      <section className=\"update-notes-section\">\n        <h4 className=\"section-header\">Summary of updates</h4>\n        {app.info.updateNotes.notes && (\n          <ul className=\"app-update-notes\">\n            {app.info.updateNotes.notes.map((note, index) => {\n              return (\n                <li className=\"app-update-notes-item\" key={index}>\n                  <div className=\"app-update-notes-item-content\">\n                    <Markdown>{note}</Markdown>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </section>\n      <HmiActions />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectDependencyApps, selectDependencyTools, selectParentApp } from \"../hmi/hmiSlice\";\nimport { LoadingSpinner } from \"../../components/LoadingSpinner/LoadingSpinner\";\nimport Hmi, { HmiType } from \"hmi\";\nimport { onTermsAgreed, onTermsDeclined, selectErrorMessage, setRedirectError } from \"./hatLoginSlice\";\nimport { UpdateNotes } from \"./UpdateNotes/UpdateNotes\";\nimport { NotificationBanner } from \"../../components/banners/NotificationBanner/NotificationBanner\";\nimport { selectLanguage } from \"../language/languageSlice\";\n\nconst HatLoginHmi: React.FC = () => {\n  const hatName = window.location.host;\n  const dispatch = useDispatch();\n  const language = useSelector(selectLanguage);\n  const parentApp = useSelector(selectParentApp);\n  const errorMessage = useSelector(selectErrorMessage);\n  const dependencyApps = useSelector(selectDependencyApps);\n  const dependencyTools = useSelector(selectDependencyTools);\n\n  const redirectBack = () => {\n    dispatch(setRedirectError('hat_exception', 'enabling_application_failed'));\n  };\n\n  if ((!parentApp || parentApp.active) || (parentApp.application.dependencies &&\n      parentApp.application.dependencies.plugs?.length !== dependencyApps.length) ||\n      (parentApp.application.dependencies &&\n          parentApp.application.dependencies.tools?.length !== dependencyTools.length)) {\n    return <LoadingSpinner loadingText={'Loading permissions...'}/>;\n  }\n\n  return (\n    <div>\n      <NotificationBanner type={'error'} display={!!errorMessage} fixed={true}>\n        <div className={'hat-login-notification'}>\n          <p>\n            An error has occurred, please use the back button to return to the previous page <br />\n            and try confirming again. If this error persists please{' '}\n            <a href={'mailto:contact@dataswift.io'} className={'link-button'}>contact us</a>\n          </p>\n          <button className={'btn btn-accent'} onClick={() => redirectBack()}>Back</button>\n        </div>\n      </NotificationBanner>\n\n      <span className={'flex-spacer-small'} />\n      {parentApp && parentApp.needsUpdating && parentApp.application.info.updateNotes ? (\n        <UpdateNotes app={parentApp.application}\n          onApproved={() => dispatch(onTermsAgreed(parentApp?.application.id || ''))}\n          onRejected={() => dispatch(onTermsDeclined())}\n        />\n      ) : (\n        <Hmi hmiType={HmiType.login.daas}\n          parentApp={parentApp.application}\n          hatName={hatName}\n          language={language}\n          dependencyTools={dependencyTools.map(tool => tool.info.name)}\n          dependencyApps={dependencyApps.map(app => app.application)}\n          onApproved={() => dispatch(onTermsAgreed(parentApp?.application.id || ''))}\n          onRejected={() => dispatch(onTermsDeclined())}\n        />)\n      }\n    </div>\n  );\n};\n\nexport default HatLoginHmi;\n","import React from \"react\";\nimport HatLoginParamValidation from \"./HatLoginParamValidation\";\nimport HatLoginHmi from \"./HatLoginHmi\";\nimport HatLoginRedirectError from \"./HatLoginRedirectError\";\nimport HatLoginApplicationHandler from \"./HatApplicationHandler\";\nimport HatLoginBuildRedirect from \"./HatLoginBuildRedirect\";\nimport HatLoginSetupDependency from \"./HatLoginSetupDependency\";\nimport './HatLogin.scss';\n\nconst HatLogin: React.FC = () => {\n  return (\n    <HatLoginParamValidation>\n      <HatLoginApplicationHandler>\n        <HatLoginBuildRedirect>\n          <HatLoginSetupDependency>\n            <HatLoginRedirectError>\n              <HatLoginHmi />\n            </HatLoginRedirectError>\n          </HatLoginSetupDependency>\n        </HatLoginBuildRedirect>\n      </HatLoginApplicationHandler>\n    </HatLoginParamValidation>\n  );\n};\n\nexport default HatLogin;\n"],"sourceRoot":""}