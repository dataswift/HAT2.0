{"version":3,"sources":["components/PasswordStrengthMeter/PasswordStrengthMeter.tsx","components/user/ChangePassword/ChangePassword.tsx"],"names":["PasswordStrengthMeter","createPasswordLabel","result","getPasswordStrengthProgress","progress","passwordStrength","this","props","className","score","value","max","Component","ChangePassword","messages","useSelector","selectMessages","useState","currentPassword","setCurrentPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","localMessages","setLocalMessages","userHatName","selectUserHatName","userHatDomain","selectUserHatDomain","setScore","useEffect","onChangePassword","e","a","preventDefault","error","changePassword","password","success","clearErrors","onSubmit","id","htmlFor","hidden","placeholder","type","onFocus","onChange","target","length","asHtml","ChangePasswordContainer","zxcvbnReady","setZxcvbnReady","loadDynamicZxcvbn","zxcvbn"],"mappings":"4MAGaA,G,OAAb,4MACEC,oBAAsB,SAACC,GACrB,OAAQA,GACN,KAAK,EAEL,KAAK,EACH,MAAO,WACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,cACT,QACE,MAAO,KAdf,EAkBEC,4BAA8B,SAACC,GAC7B,OAAIA,GAAY,EACP,EACe,IAAbA,EACF,EAEA,GAxBb,uDA6BI,IAAMC,EAAmBC,KAAKC,MAAMF,iBACpC,OACE,yBAAKG,UAAU,2BACZH,GACC,oCACE,8BACEG,UAAS,oDAAgDH,EAAiBI,OAC1EC,MAAOJ,KAAKH,4BAA4BE,EAAiBI,OACzDE,IAAI,MAEN,6BAEA,yBAAKH,UAAS,sDAAkDH,EAAiBI,QAC9EH,KAAKL,oBAAoBI,EAAiBI,cA1CzD,GAA2CG,e,6OCoB9BC,G,OAAgD,SAAC,GAA0B,IAAxBR,EAAuB,EAAvBA,iBACxDS,EAAWC,YAAYC,KADwD,EAEvCC,mBAAS,IAF8B,mBAE9EC,EAF8E,KAE7DC,EAF6D,OAG/CF,mBAAS,IAHsC,mBAG9EG,EAH8E,KAGjEC,EAHiE,OAIvCJ,mBAAS,IAJ8B,mBAI9EK,EAJ8E,KAI7DC,EAJ6D,OAK3CN,mBAAsB,IALqB,mBAK9EO,EAL8E,KAK/DC,EAL+D,KAM/EC,EAAcX,YAAYY,KAC1BC,EAAgBb,YAAYc,KAPmD,EAQ3DZ,mBAAS,GARkD,mBAQ9ER,EAR8E,KAQvEqB,EARuE,KAUrFC,qBAAU,WACRD,EAASzB,EAAiBe,GAAaX,SACtC,CAACW,EAAaf,IAEjB,IAAM2B,EAAgB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,yDACvBD,EAAEE,iBAEEf,IAAgBE,EAHG,uBAIrBG,EAAiB,CAAEW,MAAOtB,EAAS,mDAJd,+BAQnBL,EAjCsB,GAyBH,uBASrBgB,EAAiB,CAAEW,MAAOtB,EAAS,sDATd,oDAcHuB,YAAe,CAAEC,SAAUpB,EAAiBE,gBAdzC,gBAiBnBK,EAAiB,CAAEc,QAASzB,EAAS,oCAjBlB,kDAoBrBW,EAAiB,CAAEW,MAAOtB,EAAS,4BApBd,0DAAH,sDAwBhB0B,EAAc,kBAAMf,EAAiB,KAE3C,OACE,yBAAKjB,UAAU,wBACZgB,EAAcY,OACb,6BACE,yBAAK5B,UAAU,mCACb,uBAAGA,UAAU,kBAAb,WACCgB,EAAcY,QAKrB,yBAAK5B,UAAU,mBACb,wBAAIA,UAAU,yBACXkB,EACAE,IAIL,0BAAMpB,UAAU,0BAA0BiC,SAAUT,GAClD,yBAAKxB,UAAU,+BACb,kBAAC,IAAD,CAAekC,GAAG,wCAGpB,2BAAOC,QAAQ,cAAcC,QAAM,GAAnC,0CAGA,2BACEF,GAAG,cACHlC,UAAU,GACVqC,YAAY,mBACZC,KAAK,WACLC,QAASP,EACT9B,MAAOQ,EACP8B,SAAU,SAACf,GAAD,OAAOd,EAAmBc,EAAEgB,OAAOvC,UAG/C,2BAAOiC,QAAQ,UAAUC,QAAM,GAA/B,mCAGA,2BACEF,GAAG,UACHlC,UAAU,GACVqC,YAAY,mBACZC,KAAK,WACLC,QAASP,EACT9B,MAAOU,EACP4B,SAAU,SAACf,GAAD,OAAOZ,EAAeY,EAAEgB,OAAOvC,UAG3C,2BAAOiC,QAAQ,iBAAiBC,QAAM,GAAtC,wCAGA,2BACEF,GAAG,iBACHlC,UAAU,GACVqC,YAAY,uBACZC,KAAK,WACLC,QAASP,EACT9B,MAAOY,EACP0B,SAAU,SAACf,GAAD,OAAOV,EAAmBU,EAAEgB,OAAOvC,UAG9CU,EAAY8B,OAAS,GAAK,kBAAC,IAAD,CAAuB7C,iBAAkB,CAAEI,WAErEe,EAAce,SAAW,yBAAK/B,UAAU,qCAAqCgB,EAAce,SAE5F,yBAAK/B,UAAU,6BACb,kBAAC,IAAD,CAAekC,GAAG,mCAAmCS,QAAM,KAG7D,yBAAK3C,UAAU,2BACb,4BAAQA,UAAU,iBAAiBsC,KAAK,UACtC,kBAAC,IAAD,CAAeJ,GAAG,uCAmBfU,UAX2B,WAAO,IAAD,EACRnC,oBAAS,GADD,mBACvCoC,EADuC,KAC1BC,EAD0B,KAM9C,OAJAvB,qBAAU,WACRwB,aAAkB,kBAAMD,GAAe,QACtC,IAEED,EAEE,kBAACxC,EAAD,CAAgBR,iBAAkBmD,SAFhB","file":"static/js/change_password.4ac09ad6.chunk.js","sourcesContent":["import React, { Component, ReactNode } from 'react';\nimport './PasswordStrengthMeter.scss';\n\nexport class PasswordStrengthMeter extends Component<IPasswordStrengthProps> {\n  createPasswordLabel = (result: number) => {\n    switch (result) {\n      case 0:\n        return 'Too weak';\n      case 1:\n        return 'Too weak';\n      case 2:\n        return 'So-so';\n      case 3:\n        return 'Strong';\n      case 4:\n        return 'Very Strong';\n      default:\n        return '';\n    }\n  };\n\n  getPasswordStrengthProgress = (progress: number) => {\n    if (progress <= 1) {\n      return 1;\n    } else if (progress === 2) {\n      return 2;\n    } else {\n      return 4;\n    }\n  };\n\n  render(): ReactNode {\n    const passwordStrength = this.props.passwordStrength;\n    return (\n      <div className=\"password-strength-meter\">\n        {passwordStrength && (\n          <>\n            <progress\n              className={`password-strength-meter-progress strength-${ passwordStrength.score }`}\n              value={this.getPasswordStrengthProgress(passwordStrength.score)}\n              max=\"4\"\n            />\n            <br />\n\n            <div className={`password-strength-meter-label text-strength-${ passwordStrength.score }`}>\n              {this.createPasswordLabel(passwordStrength.score)}\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\ninterface IPasswordStrengthProps {\n  passwordStrength: IPasswordStrength;\n}\n\nexport interface IPasswordStrength {\n  score: number;\n}\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { changePassword } from '../../../api/hatAPI';\nimport { selectUserHatName, selectUserHatDomain } from '../../../features/authentication/authenticationSlice';\n\nimport FormatMessage from '../../../features/messages/FormatMessage';\nimport { selectMessages } from '../../../features/messages/messagesSlice';\nimport { loadDynamicZxcvbn } from '../../../utils/load-dynamic-zxcvbn';\nimport { PasswordStrengthMeter } from '../../PasswordStrengthMeter/PasswordStrengthMeter';\nimport './ChangePassword.scss';\ndeclare const zxcvbn: (pass: string) => { score: number };\n\nconst MIN_PASSWORD_STRENGTH = 3;\n\ntype ChangePasswordProps = {\n  passwordStrength: (password: string) => { score: number };\n};\n\ntype PassMessage = {\n  error?: string;\n  success?: string;\n};\n\nexport const ChangePassword: React.FC<ChangePasswordProps> = ({ passwordStrength }) => {\n  const messages = useSelector(selectMessages);\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [localMessages, setLocalMessages] = useState<PassMessage>({});\n  const userHatName = useSelector(selectUserHatName);\n  const userHatDomain = useSelector(selectUserHatDomain);\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    setScore(passwordStrength(newPassword).score);\n  }, [newPassword, passwordStrength]);\n\n  const onChangePassword = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (newPassword !== confirmPassword) {\n      setLocalMessages({ error: messages['ds.auth.passwordIndicator.passwordsDoNotMatch'] });\n      return;\n    }\n\n    if (score < MIN_PASSWORD_STRENGTH) {\n      setLocalMessages({ error: messages['ds.auth.passwordIndicator.passwordMustBeStronger'] });\n      return;\n    }\n\n    try {\n      const res = await changePassword({ password: currentPassword, newPassword });\n\n      if (res) {\n        setLocalMessages({ success: messages['ds.auth.changePassword.success'] });\n      }\n    } catch (error) {\n      setLocalMessages({ error: messages['ds.auth.error.tryAgain'] });\n    }\n  };\n\n  const clearErrors = () => setLocalMessages({});\n\n  return (\n    <div className=\"change-password-page\">\n      {localMessages.error && (\n        <div>\n          <div className=\"notification notification-error\">\n            <i className=\"material-icons\">warning</i>\n            {localMessages.error}\n          </div>\n        </div>\n      )}\n\n      <div className=\"title-container\">\n        <h3 className=\"change-password-title\">\n          {userHatName}\n          {userHatDomain}\n        </h3>\n      </div>\n\n      <form className=\"change-password-content\" onSubmit={onChangePassword}>\n        <div className=\"change-password-description\">\n          <FormatMessage id=\"ds.auth.changePassword.description\" />\n        </div>\n\n        <label htmlFor=\"currentPass\" hidden>\n          Please enter your current HAT password\n        </label>\n        <input\n          id=\"currentPass\"\n          className=\"\"\n          placeholder=\"Current password\"\n          type=\"password\"\n          onFocus={clearErrors}\n          value={currentPassword}\n          onChange={(e) => setCurrentPassword(e.target.value)}\n        />\n\n        <label htmlFor=\"newPass\" hidden>\n          Please enter a new HAT password\n        </label>\n        <input\n          id=\"newPass\"\n          className=\"\"\n          placeholder=\"New HAT password\"\n          type=\"password\"\n          onFocus={clearErrors}\n          value={newPassword}\n          onChange={(e) => setNewPassword(e.target.value)}\n        />\n\n        <label htmlFor=\"newPassConfirm\" hidden>\n          Please confirm your new HAT password\n        </label>\n        <input\n          id=\"newPassConfirm\"\n          className=\"\"\n          placeholder=\"Confirm new password\"\n          type=\"password\"\n          onFocus={clearErrors}\n          value={confirmPassword}\n          onChange={(e) => setConfirmPassword(e.target.value)}\n        />\n\n        {newPassword.length > 0 && <PasswordStrengthMeter passwordStrength={{ score }} />}\n\n        {localMessages.success && <div className=\"notification notification-success\">{localMessages.success}</div>}\n\n        <div className=\"change-password-recommend\">\n          <FormatMessage id=\"ds.auth.changePassword.recommend\" asHtml />\n        </div>\n\n        <div className=\"change-password-actions\">\n          <button className=\"btn btn-accent\" type=\"submit\">\n            <FormatMessage id=\"ds.auth.input.changePassword\" />\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst ChangePasswordContainer: React.FC = () => {\n  const [zxcvbnReady, setZxcvbnReady] = useState(false);\n  useEffect(() => {\n    loadDynamicZxcvbn(() => setZxcvbnReady(true));\n  }, []);\n\n  if (!zxcvbnReady) return null;\n\n  return <ChangePassword passwordStrength={zxcvbn} />;\n};\n\nexport default ChangePasswordContainer;\n"],"sourceRoot":""}