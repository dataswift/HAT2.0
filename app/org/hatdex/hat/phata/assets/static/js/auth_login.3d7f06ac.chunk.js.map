{"version":3,"sources":["features/authentication/AuthLogin.tsx"],"names":["AuthLogin","parentApp","useSelector","selectApplicationHmi","parentAppState","selectApplicationHmiState","messages","selectMessages","useState","password","setPassword","hatName","setHatName","errorMessage","setErrorMessage","history","useHistory","location","useLocation","dispatch","useDispatch","targetParam","queryString","window","search","target","state","from","query","repeat","email","applicationId","redirectUri","loginSuccessful","replace","href","origin","useEffect","host","hostname","hatSvc","HatClientService","getInstance","substring","indexOf","token","Cookies","get","isTokenExpired","loginWithToken","login","a","userAccessToken","res","parsedBody","accessToken","secure","protocol","set","expires","sameSite","getApplicationHmi","setAppsHmiState","className","src","info","graphics","logo","normal","alt","name","id","type","aria-label","placeholder","autoComplete","value","hasError","onChange","e","disabled","length","onClick","to","config","links","hatters"],"mappings":"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","file":"static/js/auth_login.3d7f06ac.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './AuthLogin.scss';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Cookies from 'js-cookie';\nimport * as queryString from 'query-string';\nimport { HatClientService } from '../../services/HatClientService';\nimport { loginWithToken } from './authenticationSlice';\nimport { userAccessToken } from '../../api/hatAPI';\nimport { AuthApplicationLogo, Input } from 'hmi';\nimport {\n  getApplicationHmi,\n  selectApplicationHmi,\n  selectApplicationHmiState,\n  setAppsHmiState,\n} from '../applications/applicationsSlice';\nimport { config } from '../../app.config';\nimport FormatMessage from '../messages/FormatMessage';\nimport { selectMessages } from '../messages/messagesSlice';\n\ntype Query = {\n  target?: string;\n};\n\ntype QueryLocationState = {\n  repeat?: string;\n  email?: string;\n  applicationId?: string;\n  redirectUri?: string;\n};\n\nconst AuthLogin: React.FC = () => {\n  const parentApp = useSelector(selectApplicationHmi);\n  const parentAppState = useSelector(selectApplicationHmiState);\n  const messages = useSelector(selectMessages);\n  const [password, setPassword] = useState('');\n  const [hatName, setHatName] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  let history = useHistory();\n  let location = useLocation<{ from?: string; query: QueryLocationState }>();\n  const dispatch = useDispatch();\n  const { target } = queryString.parse(window.location.search) as Query;\n  const targetParam = target || '/feed';\n\n  const { from, query } = location?.state || {};\n  const { repeat, email, applicationId, redirectUri } = query || {};\n\n  const loginSuccessful = () => {\n    if (from) {\n      history.replace(from);\n    } else {\n      window.location.href = window.location.origin + '/#' + targetParam;\n    }\n  };\n\n  useEffect(() => {\n    const host = window.location.hostname;\n    const hatSvc = HatClientService.getInstance();\n\n    setHatName(host.substring(0, host.indexOf('.')));\n\n    const token = Cookies.get('token');\n\n    if (token && !hatSvc.isTokenExpired(token)) {\n      dispatch(loginWithToken(token));\n      HatClientService.getInstance(token);\n\n      loginSuccessful();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const login = async () => {\n    setErrorMessage('');\n\n    try {\n      const res = await userAccessToken(hatName, password);\n\n      if (res.parsedBody) {\n        dispatch(loginWithToken(res.parsedBody.accessToken));\n        HatClientService.getInstance(res.parsedBody.accessToken);\n\n        const secure = window.location.protocol === 'https:';\n\n        // TODO ensure that this is fine to do\n        Cookies.set('token', res.parsedBody.accessToken, { expires: 3, secure: secure, sameSite: 'strict' });\n\n        loginSuccessful();\n      }\n    } catch (e) {\n      if (messages) {\n        setErrorMessage(messages['ds.auth.login.passwordIncorrect']);\n      }\n    }\n  };\n\n  const navigateToSignup = () => {\n    if (applicationId && redirectUri) {\n      // eslint-disable-next-line max-len\n      window.location.href = `${config.links.hatters}/services/signup?application_id=${applicationId}&redirect_uri=${redirectUri}`;\n    } else {\n      window.location.href = `${config.links.hatters}/hat/signup`;\n    }\n  };\n\n  useEffect(() => {\n    if (applicationId && !parentApp) {\n      dispatch(getApplicationHmi(applicationId));\n    } else {\n      dispatch(setAppsHmiState('completed'));\n    }\n  }, [dispatch, parentApp, applicationId]);\n\n  return (\n    <div>\n      <div className={'flex-column-wrapper auth-login'}>\n        <AuthApplicationLogo\n          src={parentApp?.info.graphics.logo.normal}\n          alt={parentApp?.info.name}\n          state={parentAppState}\n        />\n\n        <h2 className={'ds-hmi-email auth-login-email-title'}>{email}</h2>\n\n        <h2 className={'auth-login-title'}>\n          <FormatMessage id={repeat ? 'ds.auth.login.title.password.repeat' : 'ds.auth.login.title.password'} />\n        </h2>\n\n        <Input\n          type={'password'}\n          aria-label=\"password\"\n          placeholder={'Password'}\n          autoComplete={'password'}\n          id={'password'}\n          value={password}\n          hasError={!!errorMessage}\n          errorMessage={errorMessage}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n\n        <button\n          aria-label=\"Next Button\"\n          className={'auth-login-btn ds-hmi-btn'}\n          disabled={password.length < 3}\n          onClick={() => login()}\n        >\n          <FormatMessage id={'ds.auth.nextBtn'} />\n        </button>\n\n        <Link className={'auth-login-btn-link'} to={'/auth/recover-password'}>\n          <FormatMessage id={'ds.auth.login.forgotPassword'} />\n        </Link>\n\n        <hr />\n\n        <p className={'auth-login-have-an-account'}>\n          <FormatMessage\n            id={repeat ? 'ds.auth.login.title.wantToCreateAccount' : 'ds.auth.login.title.dontHaveAnAccount'}\n          />\n        </p>\n\n        <button className={'auth-login-btn-signup ds-hmi-btn'} onClick={() => navigateToSignup()}>\n          <FormatMessage id={'ds.auth.signupBtn'} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthLogin;\n"],"sourceRoot":""}